/* The following code was generated by JFlex 1.4.3 on 9/12/14 12:09 PM */

package com.muranoplugin;
import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import static com.muranoplugin.lex.psi.MuranoTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 9/12/14 12:09 PM from the specification file
 * <tt>/Users/gokrokve/IdeaProjects/MuranoCode/src/com/muranoplugin/_MuranoHLexer.flex</tt>
 */
public class _MuranoHLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\11\1\2\1\6\1\1\1\1\22\0\1\11\1\66\1\5"+
    "\1\7\1\14\2\0\1\3\1\22\1\54\1\62\1\61\1\64\1\53"+
    "\1\13\1\63\12\12\1\37\1\0\1\65\1\51\1\52\2\0\1\20"+
    "\1\104\1\102\1\50\1\100\1\47\2\72\1\40\3\72\1\77\1\74"+
    "\1\41\1\35\1\72\1\43\1\72\1\45\1\103\1\72\1\75\3\72"+
    "\1\57\1\4\1\60\1\10\1\72\1\0\1\33\1\30\1\31\1\27"+
    "\1\16\1\24\1\23\1\46\1\25\1\72\1\76\1\32\1\44\1\26"+
    "\1\34\1\36\1\72\1\21\1\15\1\17\1\42\1\71\1\67\1\101"+
    "\1\70\1\72\1\55\1\0\1\56\54\0\1\73\12\0\1\73\4\0"+
    "\1\73\5\0\27\73\1\0\37\73\1\0\u013f\73\31\0\162\73\4\0"+
    "\14\73\16\0\5\73\11\0\1\73\213\0\1\73\13\0\1\73\1\0"+
    "\3\73\1\0\1\73\1\0\24\73\1\0\54\73\1\0\46\73\1\0"+
    "\5\73\4\0\202\73\10\0\105\73\1\0\46\73\2\0\2\73\6\0"+
    "\20\73\41\0\46\73\2\0\1\73\7\0\47\73\110\0\33\73\5\0"+
    "\3\73\56\0\32\73\5\0\13\73\25\0\12\10\4\0\2\73\1\0"+
    "\143\73\1\0\1\73\17\0\2\73\7\0\2\73\12\10\3\73\2\0"+
    "\1\73\20\0\1\73\1\0\36\73\35\0\3\73\60\0\46\73\13\0"+
    "\1\73\u0152\0\66\73\3\0\1\73\22\0\1\73\7\0\12\73\4\0"+
    "\12\10\25\0\10\73\2\0\2\73\2\0\26\73\1\0\7\73\1\0"+
    "\1\73\3\0\4\73\3\0\1\73\36\0\2\73\1\0\3\73\4\0"+
    "\12\10\2\73\23\0\6\73\4\0\2\73\2\0\26\73\1\0\7\73"+
    "\1\0\2\73\1\0\2\73\1\0\2\73\37\0\4\73\1\0\1\73"+
    "\7\0\12\10\2\0\3\73\20\0\11\73\1\0\3\73\1\0\26\73"+
    "\1\0\7\73\1\0\2\73\1\0\5\73\3\0\1\73\22\0\1\73"+
    "\17\0\2\73\4\0\12\10\25\0\10\73\2\0\2\73\2\0\26\73"+
    "\1\0\7\73\1\0\2\73\1\0\5\73\3\0\1\73\36\0\2\73"+
    "\1\0\3\73\4\0\12\10\1\0\1\73\21\0\1\73\1\0\6\73"+
    "\3\0\3\73\1\0\4\73\3\0\2\73\1\0\1\73\1\0\2\73"+
    "\3\0\2\73\3\0\3\73\3\0\10\73\1\0\3\73\55\0\11\10"+
    "\25\0\10\73\1\0\3\73\1\0\27\73\1\0\12\73\1\0\5\73"+
    "\46\0\2\73\4\0\12\10\25\0\10\73\1\0\3\73\1\0\27\73"+
    "\1\0\12\73\1\0\5\73\3\0\1\73\40\0\1\73\1\0\2\73"+
    "\4\0\12\10\25\0\10\73\1\0\3\73\1\0\27\73\1\0\20\73"+
    "\46\0\2\73\4\0\12\10\25\0\22\73\3\0\30\73\1\0\11\73"+
    "\1\0\1\73\2\0\7\73\72\0\60\73\1\0\2\73\14\0\7\73"+
    "\11\0\12\10\47\0\2\73\1\0\1\73\2\0\2\73\1\0\1\73"+
    "\2\0\1\73\6\0\4\73\1\0\7\73\1\0\3\73\1\0\1\73"+
    "\1\0\1\73\2\0\2\73\1\0\4\73\1\0\2\73\11\0\1\73"+
    "\2\0\5\73\1\0\1\73\11\0\12\10\2\0\2\73\42\0\1\73"+
    "\37\0\12\10\26\0\10\73\1\0\42\73\35\0\4\73\164\0\42\73"+
    "\1\0\5\73\1\0\2\73\25\0\12\10\6\0\6\73\112\0\46\73"+
    "\12\0\51\73\7\0\132\73\5\0\104\73\5\0\122\73\6\0\7\73"+
    "\1\0\77\73\1\0\1\73\1\0\4\73\2\0\7\73\1\0\1\73"+
    "\1\0\4\73\2\0\47\73\1\0\1\73\1\0\4\73\2\0\37\73"+
    "\1\0\1\73\1\0\4\73\2\0\7\73\1\0\1\73\1\0\4\73"+
    "\2\0\7\73\1\0\7\73\1\0\27\73\1\0\37\73\1\0\1\73"+
    "\1\0\4\73\2\0\7\73\1\0\47\73\1\0\23\73\16\0\11\10"+
    "\56\0\125\73\14\0\u026c\73\2\0\10\73\12\0\32\73\5\0\113\73"+
    "\25\0\15\73\1\0\4\73\16\0\22\73\16\0\22\73\16\0\15\73"+
    "\1\0\3\73\17\0\64\73\43\0\1\73\4\0\1\73\3\0\12\10"+
    "\46\0\12\10\6\0\130\73\10\0\51\73\127\0\35\73\51\0\12\10"+
    "\36\73\2\0\5\73\u038b\0\154\73\224\0\234\73\4\0\132\73\6\0"+
    "\26\73\2\0\6\73\2\0\46\73\2\0\6\73\2\0\10\73\1\0"+
    "\1\73\1\0\1\73\1\0\1\73\1\0\37\73\2\0\65\73\1\0"+
    "\7\73\1\0\1\73\3\0\3\73\1\0\7\73\3\0\4\73\2\0"+
    "\6\73\4\0\15\73\5\0\3\73\1\0\7\73\164\0\1\73\15\0"+
    "\1\73\202\0\1\73\4\0\1\73\2\0\12\73\1\0\1\73\3\0"+
    "\5\73\6\0\1\73\1\0\1\73\1\0\1\73\1\0\4\73\1\0"+
    "\3\73\1\0\7\73\3\0\3\73\5\0\5\73\u0ebb\0\2\73\52\0"+
    "\5\73\5\0\2\73\4\0\126\73\6\0\3\73\1\0\132\73\1\0"+
    "\4\73\5\0\50\73\4\0\136\73\21\0\30\73\70\0\20\73\u0200\0"+
    "\u19b6\73\112\0\u51a6\73\132\0\u048d\73\u0773\0\u2ba4\73\u215c\0\u012e\73\2\0"+
    "\73\73\225\0\7\73\14\0\5\73\5\0\1\73\1\0\12\73\1\0"+
    "\15\73\1\0\5\73\1\0\1\73\1\0\2\73\1\0\2\73\1\0"+
    "\154\73\41\0\u016b\73\22\0\100\73\2\0\66\73\50\0\14\73\164\0"+
    "\5\73\1\0\207\73\23\0\12\10\7\0\32\73\6\0\32\73\13\0"+
    "\131\73\3\0\6\73\2\0\6\73\2\0\6\73\2\0\3\73\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\3\2\1\4\1\5\1\6\1\7"+
    "\3\1\1\10\10\1\1\11\5\1\1\12\1\13\1\2"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\10\1\1\3\12\0\1\11\6\0"+
    "\1\12\1\0\1\27\2\0\1\30\3\0\1\5\1\0"+
    "\1\31\1\32\1\33\1\32\1\34\1\35\1\0\13\1"+
    "\1\36\14\1\1\12\1\37\1\13\1\40\1\41\1\25"+
    "\1\42\1\27\1\43\10\1\10\0\1\36\13\0\1\44"+
    "\1\0\1\32\6\35\1\0\5\1\1\45\1\46\3\1"+
    "\1\47\3\1\1\50\1\51\6\1\1\31\10\1\3\0"+
    "\1\45\1\46\2\0\1\47\3\0\1\50\1\52\1\51"+
    "\6\0\1\53\1\0\1\32\6\35\1\54\4\1\1\55"+
    "\1\56\5\1\1\57\2\1\1\60\1\1\1\61\10\1"+
    "\3\0\1\55\1\56\4\0\1\62\2\0\1\60\1\0"+
    "\1\32\6\35\2\1\1\63\6\1\1\64\1\65\2\1"+
    "\1\66\2\1\1\67\3\1\1\70\1\71\7\0\1\64"+
    "\1\0\1\72\4\35\1\73\1\35\1\1\1\74\1\75"+
    "\13\1\1\76\1\0\1\75\3\0\1\77\2\0\3\35"+
    "\1\100\1\35\5\1\1\101\6\1\5\0\1\102\3\35"+
    "\1\103\5\1\1\104\2\1\1\105\1\106\1\1\1\0"+
    "\1\107\2\0\1\110\1\35\1\111\1\35\1\1\1\112"+
    "\4\1\1\113\1\114\3\0\1\115\1\116\1\117\4\1"+
    "\1\120\2\0\1\121\1\122\1\123\1\124\1\121\1\123";

  private static int [] zzUnpackAction() {
    int [] result = new int[398];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\105\0\212\0\317\0\u0114\0\u0159\0\u019e\0\u01e3"+
    "\0\u0228\0\u026d\0\u02b2\0\u02f7\0\u033c\0\u0381\0\u03c6\0\u040b"+
    "\0\u0450\0\u0495\0\u04da\0\u051f\0\u0564\0\u05a9\0\u05ee\0\u0633"+
    "\0\u0678\0\u06bd\0\u0702\0\u0747\0\u078c\0\u07d1\0\u0816\0\105"+
    "\0\u085b\0\105\0\u08a0\0\105\0\u08e5\0\u092a\0\u096f\0\u09b4"+
    "\0\u09f9\0\u0a3e\0\u0a83\0\u0ac8\0\u0b0d\0\u0b52\0\u0b97\0\u0bdc"+
    "\0\u0c21\0\u0c66\0\u0cab\0\u0cf0\0\u0d35\0\u0d7a\0\u0dbf\0\u0e04"+
    "\0\u0e49\0\u0e8e\0\u0ed3\0\u0f18\0\u0f5d\0\u0fa2\0\u0fe7\0\u102c"+
    "\0\u1071\0\u10b6\0\u10fb\0\u1140\0\u1185\0\u11ca\0\u0a3e\0\u120f"+
    "\0\317\0\105\0\u1254\0\u0114\0\u1299\0\u12de\0\u1323\0\u1368"+
    "\0\u13ad\0\105\0\u13f2\0\u1437\0\u147c\0\u14c1\0\u1506\0\u154b"+
    "\0\u1590\0\u15d5\0\u161a\0\u165f\0\u16a4\0\u16e9\0\u172e\0\u1773"+
    "\0\u17b8\0\u17fd\0\u1842\0\u1887\0\u18cc\0\u1911\0\u1956\0\u199b"+
    "\0\u19e0\0\u1a25\0\u1a6a\0\u1aaf\0\u1af4\0\u1b39\0\u1b7e\0\u1bc3"+
    "\0\u1c08\0\u1c4d\0\u1c92\0\u1cd7\0\u1d1c\0\u1d61\0\u1da6\0\u1deb"+
    "\0\u1e30\0\u1e75\0\u1eba\0\u1eff\0\u1f44\0\u1f89\0\u1fce\0\u2013"+
    "\0\u2058\0\u209d\0\u20e2\0\u2127\0\u216c\0\u21b1\0\u21f6\0\u223b"+
    "\0\u2280\0\u22c5\0\u230a\0\u234f\0\u2394\0\u23d9\0\u241e\0\u2463"+
    "\0\u24a8\0\u24ed\0\u2532\0\u2577\0\u25bc\0\u2601\0\u2646\0\u268b"+
    "\0\u26d0\0\u2715\0\u275a\0\u279f\0\u27e4\0\u2829\0\u286e\0\u28b3"+
    "\0\u28f8\0\u293d\0\u02b2\0\u2982\0\u29c7\0\u2a0c\0\u2a51\0\u2a96"+
    "\0\u2adb\0\u2b20\0\u2b65\0\u2baa\0\u2bef\0\u2c34\0\u2c79\0\u2cbe"+
    "\0\u2d03\0\u2d48\0\u2d8d\0\u2dd2\0\u2e17\0\u2e5c\0\u2ea1\0\u2ee6"+
    "\0\u2f2b\0\u2f70\0\u2fb5\0\u2ffa\0\u303f\0\u3084\0\u30c9\0\105"+
    "\0\u310e\0\u3153\0\u3198\0\u31dd\0\u3222\0\u3267\0\u32ac\0\u32f1"+
    "\0\u3336\0\u337b\0\u33c0\0\u3405\0\u344a\0\u348f\0\u34d4\0\u3519"+
    "\0\u2532\0\u355e\0\u35a3\0\u35e8\0\u362d\0\u3672\0\u36b7\0\u36fc"+
    "\0\u3741\0\u02b2\0\u3786\0\u37cb\0\u3810\0\u3855\0\u389a\0\u02b2"+
    "\0\u38df\0\u3924\0\u3969\0\u39ae\0\u39f3\0\u02b2\0\u3a38\0\u3a7d"+
    "\0\u3ac2\0\u3b07\0\105\0\u3b4c\0\u3b91\0\u3bd6\0\u3c1b\0\u3c60"+
    "\0\u3ca5\0\u3cea\0\u3d2f\0\u3d74\0\u3db9\0\u3dfe\0\u3e43\0\105"+
    "\0\u3e88\0\u3ecd\0\u3f12\0\u3f57\0\u3405\0\u3f9c\0\u3fe1\0\u4026"+
    "\0\u406b\0\u40b0\0\u40f5\0\u413a\0\u417f\0\u41c4\0\u4209\0\u424e"+
    "\0\u4293\0\u42d8\0\u02b2\0\u431d\0\u4362\0\u43a7\0\u43ec\0\u4431"+
    "\0\u4476\0\u1368\0\u02b2\0\u44bb\0\u4500\0\u1368\0\u4545\0\u458a"+
    "\0\u1368\0\u45cf\0\u4614\0\u4659\0\u1368\0\u469e\0\u46e3\0\u4728"+
    "\0\u476d\0\u47b2\0\u47f7\0\u483c\0\u4881\0\105\0\u48c6\0\105"+
    "\0\u490b\0\u4950\0\u4995\0\u49da\0\105\0\u4a1f\0\u4a64\0\u02b2"+
    "\0\u02b2\0\u4aa9\0\u4aee\0\u4b33\0\u4b78\0\u4bbd\0\u4c02\0\u4c47"+
    "\0\u4c8c\0\u4cd1\0\u4d16\0\u4d5b\0\u1368\0\u4da0\0\105\0\u4de5"+
    "\0\u4e2a\0\u4e6f\0\u483c\0\u4eb4\0\u4ef9\0\u4f3e\0\u4f83\0\u4fc8"+
    "\0\105\0\u500d\0\u5052\0\u5097\0\u50dc\0\u5121\0\u5166\0\u1368"+
    "\0\u51ab\0\u51f0\0\u5235\0\u527a\0\u52bf\0\u5304\0\u5349\0\u538e"+
    "\0\u53d3\0\u5418\0\u545d\0\u4ef9\0\u54a2\0\u54e7\0\u552c\0\105"+
    "\0\u5571\0\u55b6\0\u55fb\0\u5640\0\u5685\0\u1368\0\u56ca\0\u570f"+
    "\0\u1368\0\u1368\0\u5754\0\u5799\0\u57de\0\u5823\0\u5868\0\u545d"+
    "\0\u58ad\0\105\0\u58f2\0\u5937\0\105\0\u597c\0\u59c1\0\u5a06"+
    "\0\u5a4b\0\u1368\0\u1368\0\u5a90\0\u5ad5\0\u5b1a\0\105\0\105"+
    "\0\u1368\0\u5b5f\0\u5ba4\0\u5be9\0\u5c2e\0\u5c73\0\u5cb8\0\u5cfd"+
    "\0\u1368\0\u1368\0\u5d42\0\u1368\0\105\0\u5d87";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[398];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\2\1\5\1\6\1\7\1\2"+
    "\1\3\1\10\1\11\1\12\2\13\1\14\1\15\1\13"+
    "\1\16\1\13\1\17\1\13\1\20\1\21\1\13\1\22"+
    "\1\13\1\23\1\24\1\25\1\26\1\27\1\30\2\13"+
    "\1\31\1\13\1\32\1\13\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\4\13\1\53\1\54\1\55"+
    "\1\13\1\56\1\57\1\13\1\60\1\61\1\62\106\0"+
    "\2\63\3\0\1\64\1\7\1\0\1\63\5\0\1\65"+
    "\1\0\1\66\1\16\1\0\1\67\1\0\1\70\1\71"+
    "\3\0\1\72\1\73\1\74\1\75\1\76\1\77\1\100"+
    "\1\0\1\101\1\0\1\102\1\0\1\103\1\104\1\105"+
    "\1\36\1\106\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\107\2\0\1\110\13\0"+
    "\3\111\1\112\1\113\100\111\4\114\1\115\1\112\77\114"+
    "\1\0\2\64\3\0\1\64\1\7\1\0\1\64\5\0"+
    "\1\65\1\0\1\66\1\16\1\0\1\67\1\0\1\70"+
    "\1\71\3\0\1\72\1\73\1\74\1\75\1\76\1\77"+
    "\1\100\1\0\1\101\1\0\1\102\1\0\1\103\1\104"+
    "\1\105\1\36\1\106\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\107\2\0\1\110"+
    "\16\0\2\7\3\0\42\7\1\0\4\7\2\0\4\7"+
    "\2\0\16\7\12\0\1\10\1\116\1\0\5\117\1\0"+
    "\14\117\1\120\11\117\16\0\4\117\1\0\11\117\12\0"+
    "\1\121\2\0\5\121\1\122\5\121\1\123\6\121\1\0"+
    "\11\121\16\0\4\121\1\0\11\121\12\0\1\124\1\125"+
    "\1\126\5\124\1\0\14\124\1\0\11\124\16\0\4\124"+
    "\1\0\11\124\12\0\1\117\2\0\5\13\1\0\14\13"+
    "\1\120\11\13\16\0\4\13\1\53\11\13\12\0\1\117"+
    "\2\0\4\13\1\127\1\0\14\13\1\120\11\13\16\0"+
    "\4\13\1\53\11\13\12\0\1\117\2\0\4\13\1\130"+
    "\1\0\6\13\1\131\5\13\1\120\11\13\16\0\4\13"+
    "\1\53\11\13\1\0\2\16\3\0\1\16\2\0\1\16"+
    "\105\0\1\117\2\0\5\13\1\0\10\13\1\132\1\133"+
    "\2\13\1\120\11\13\16\0\4\13\1\53\11\13\12\0"+
    "\1\117\2\0\1\13\1\134\3\13\1\0\11\13\1\135"+
    "\2\13\1\120\2\13\1\136\6\13\16\0\4\13\1\53"+
    "\11\13\12\0\1\117\2\0\5\13\1\0\2\13\1\137"+
    "\11\13\1\120\11\13\16\0\4\13\1\53\11\13\12\0"+
    "\1\117\2\0\5\13\1\0\11\13\1\140\2\13\1\120"+
    "\11\13\16\0\4\13\1\53\11\13\12\0\1\117\2\0"+
    "\5\13\1\0\3\13\1\141\10\13\1\120\11\13\16\0"+
    "\4\13\1\53\11\13\12\0\1\117\2\0\4\13\1\142"+
    "\1\0\14\13\1\120\11\13\16\0\4\13\1\53\11\13"+
    "\12\0\1\117\2\0\4\13\1\143\1\0\10\13\1\144"+
    "\3\13\1\120\11\13\16\0\4\13\1\53\11\13\12\0"+
    "\1\117\2\0\4\13\1\145\1\0\14\13\1\120\11\13"+
    "\16\0\4\13\1\53\11\13\11\0\1\76\1\120\2\0"+
    "\5\120\1\0\14\120\1\0\11\120\16\0\4\120\1\0"+
    "\11\120\12\0\1\117\2\0\5\13\1\0\1\13\1\146"+
    "\1\13\1\147\10\13\1\120\11\13\16\0\4\13\1\53"+
    "\11\13\12\0\1\117\2\0\1\13\1\150\3\13\1\0"+
    "\14\13\1\120\11\13\16\0\4\13\1\53\11\13\12\0"+
    "\1\117\2\0\4\13\1\151\1\0\14\13\1\120\6\13"+
    "\1\152\2\13\16\0\4\13\1\53\11\13\12\0\1\117"+
    "\2\0\5\13\1\0\10\13\1\153\1\154\2\13\1\120"+
    "\11\13\16\0\4\13\1\53\11\13\12\0\1\117\2\0"+
    "\1\13\1\155\3\13\1\0\11\13\1\156\2\13\1\120"+
    "\11\13\16\0\4\13\1\53\11\13\1\0\2\157\3\0"+
    "\1\157\2\0\1\157\40\0\1\160\33\0\2\161\3\0"+
    "\1\161\2\0\1\161\37\0\1\162\77\0\1\163\41\0"+
    "\2\41\3\0\1\41\2\0\1\41\74\0\2\43\3\0"+
    "\1\43\2\0\1\43\74\0\2\45\3\0\1\45\2\0"+
    "\1\45\74\0\2\46\3\0\1\46\2\0\1\46\74\0"+
    "\2\47\3\0\1\47\2\0\1\47\74\0\2\50\3\0"+
    "\1\50\2\0\1\50\74\0\2\164\3\0\1\164\2\0"+
    "\1\164\37\0\1\165\34\0\2\166\3\0\1\166\2\0"+
    "\1\166\37\0\1\167\50\0\5\53\1\0\14\53\1\0"+
    "\11\53\16\0\16\53\12\0\1\117\2\0\5\13\1\0"+
    "\10\13\1\170\3\13\1\120\11\13\16\0\4\13\1\53"+
    "\11\13\12\0\1\117\2\0\5\13\1\0\11\13\1\171"+
    "\2\13\1\120\11\13\16\0\4\13\1\53\11\13\12\0"+
    "\1\117\2\0\1\13\1\172\3\13\1\0\14\13\1\120"+
    "\11\13\16\0\4\13\1\53\11\13\12\0\1\117\2\0"+
    "\5\13\1\0\7\13\1\173\4\13\1\120\11\13\16\0"+
    "\4\13\1\53\5\13\1\174\3\13\12\0\1\117\2\0"+
    "\5\13\1\0\11\13\1\175\2\13\1\120\11\13\16\0"+
    "\4\13\1\53\11\13\12\0\1\117\2\0\1\176\4\13"+
    "\1\0\14\13\1\120\11\13\16\0\4\13\1\53\11\13"+
    "\12\0\1\117\2\0\5\13\1\0\11\13\1\177\2\13"+
    "\1\120\11\13\16\0\4\13\1\53\11\13\1\0\2\63"+
    "\3\0\1\64\1\7\1\0\1\63\7\0\1\66\1\16"+
    "\1\0\1\67\1\0\1\70\1\71\3\0\1\72\1\73"+
    "\1\74\1\75\1\76\1\77\1\100\1\0\1\101\1\0"+
    "\1\102\1\0\1\103\1\104\1\105\1\36\1\106\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\107\2\0\1\110\14\0\2\64\3\0\1\64"+
    "\1\7\1\0\1\64\7\0\1\66\1\16\1\0\1\67"+
    "\1\0\1\70\1\71\3\0\1\72\1\73\1\74\1\75"+
    "\1\76\1\77\1\100\1\0\1\101\1\0\1\102\1\0"+
    "\1\103\1\104\1\105\1\36\1\106\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\107"+
    "\2\0\1\110\103\0\1\200\32\0\1\201\122\0\1\202"+
    "\66\0\1\203\15\0\1\204\5\0\1\205\67\0\1\206"+
    "\105\0\1\207\77\0\1\210\20\0\1\211\63\0\1\212"+
    "\104\0\1\213\74\0\1\76\117\0\1\214\1\0\1\215"+
    "\120\0\1\216\104\0\1\217\110\0\1\220\72\0\1\221"+
    "\104\0\1\222\51\0\2\157\3\0\1\157\2\0\1\157"+
    "\25\0\1\223\12\0\1\160\33\0\2\224\3\0\1\224"+
    "\2\0\1\224\32\0\1\163\73\0\1\225\51\0\2\111"+
    "\1\0\102\111\2\114\1\0\102\114\12\0\1\116\104\0"+
    "\1\117\2\0\5\117\1\0\14\117\1\120\11\117\16\0"+
    "\4\117\1\0\11\117\12\0\1\120\2\0\5\120\1\0"+
    "\14\120\1\0\11\120\16\0\4\120\1\0\11\120\12\0"+
    "\1\121\2\0\5\121\1\122\14\121\1\0\11\121\16\0"+
    "\4\121\1\0\11\121\12\0\1\121\2\0\5\121\1\122"+
    "\2\121\1\226\11\121\1\0\11\121\16\0\4\121\1\0"+
    "\11\121\12\0\1\124\2\0\5\124\1\0\14\124\1\0"+
    "\11\124\16\0\4\124\1\0\11\124\12\0\1\227\2\0"+
    "\1\230\4\227\1\122\1\231\1\232\1\233\3\227\1\234"+
    "\5\227\1\0\11\227\16\0\4\227\1\0\11\227\13\0"+
    "\1\235\1\126\102\0\1\117\2\0\5\13\1\0\14\13"+
    "\1\120\2\13\1\236\6\13\16\0\4\13\1\53\11\13"+
    "\12\0\1\117\2\0\5\13\1\0\1\237\13\13\1\120"+
    "\11\13\16\0\4\13\1\53\11\13\12\0\1\117\2\0"+
    "\2\13\1\240\2\13\1\0\14\13\1\120\11\13\16\0"+
    "\4\13\1\53\11\13\12\0\1\117\2\0\5\13\1\0"+
    "\7\13\1\241\4\13\1\120\11\13\16\0\4\13\1\53"+
    "\11\13\12\0\1\117\2\0\4\13\1\242\1\0\14\13"+
    "\1\120\11\13\16\0\4\13\1\53\11\13\12\0\1\117"+
    "\2\0\5\13\1\0\14\13\1\120\11\13\16\0\1\243"+
    "\3\13\1\53\11\13\12\0\1\117\2\0\2\13\1\244"+
    "\2\13\1\0\14\13\1\120\11\13\16\0\4\13\1\53"+
    "\11\13\12\0\1\117\2\0\5\13\1\0\7\13\1\245"+
    "\4\13\1\120\11\13\16\0\4\13\1\53\11\13\12\0"+
    "\1\117\2\0\5\13\1\0\6\13\1\246\5\13\1\120"+
    "\11\13\16\0\4\13\1\53\11\13\12\0\1\117\2\0"+
    "\5\13\1\0\10\13\1\247\3\13\1\120\11\13\16\0"+
    "\4\13\1\53\11\13\12\0\1\117\2\0\5\13\1\0"+
    "\4\13\1\250\7\13\1\120\11\13\16\0\4\13\1\53"+
    "\11\13\1\0\2\210\3\0\1\210\2\0\1\210\1\117"+
    "\2\0\5\13\1\0\14\13\1\120\11\13\16\0\4\13"+
    "\1\53\11\13\12\0\1\117\2\0\5\13\1\0\11\13"+
    "\1\251\2\13\1\120\11\13\16\0\4\13\1\53\11\13"+
    "\12\0\1\117\2\0\4\13\1\252\1\0\14\13\1\120"+
    "\11\13\16\0\4\13\1\53\11\13\12\0\1\117\2\0"+
    "\5\13\1\0\11\13\1\253\2\13\1\120\11\13\16\0"+
    "\4\13\1\53\11\13\12\0\1\117\2\0\5\13\1\0"+
    "\14\13\1\254\11\13\16\0\4\13\1\53\11\13\12\0"+
    "\1\117\2\0\5\13\1\0\14\13\1\255\11\13\16\0"+
    "\4\13\1\53\11\13\12\0\1\117\2\0\2\13\1\256"+
    "\2\13\1\0\14\13\1\120\11\13\16\0\4\13\1\53"+
    "\11\13\12\0\1\117\2\0\5\13\1\0\14\13\1\120"+
    "\2\13\1\257\6\13\16\0\4\13\1\53\11\13\12\0"+
    "\1\117\2\0\1\13\1\260\3\13\1\0\14\13\1\120"+
    "\11\13\16\0\4\13\1\53\11\13\12\0\1\117\2\0"+
    "\5\13\1\0\7\13\1\261\4\13\1\120\11\13\16\0"+
    "\4\13\1\53\11\13\12\0\1\117\2\0\4\13\1\262"+
    "\1\0\14\13\1\120\11\13\16\0\4\13\1\53\11\13"+
    "\12\0\1\117\2\0\5\13\1\0\1\13\1\263\12\13"+
    "\1\120\11\13\16\0\4\13\1\53\11\13\12\0\1\117"+
    "\2\0\5\13\1\0\14\13\1\264\11\13\16\0\4\13"+
    "\1\53\11\13\1\0\2\157\3\0\1\157\2\0\1\157"+
    "\74\0\2\160\3\0\1\160\2\0\1\160\74\0\2\161"+
    "\3\0\1\161\2\0\1\161\74\0\2\162\3\0\1\162"+
    "\2\0\1\162\74\0\2\163\3\0\1\163\2\0\1\163"+
    "\74\0\2\164\3\0\1\164\2\0\1\164\74\0\2\165"+
    "\3\0\1\165\2\0\1\165\74\0\2\166\3\0\1\166"+
    "\2\0\1\166\74\0\2\167\3\0\1\167\2\0\1\167"+
    "\105\0\1\117\2\0\5\13\1\0\14\13\1\120\4\13"+
    "\1\265\4\13\16\0\4\13\1\53\11\13\12\0\1\117"+
    "\2\0\4\13\1\266\1\0\14\13\1\120\11\13\16\0"+
    "\4\13\1\53\11\13\12\0\1\117\2\0\2\13\1\267"+
    "\2\13\1\0\14\13\1\120\11\13\16\0\4\13\1\53"+
    "\11\13\12\0\1\117\2\0\1\270\4\13\1\0\14\13"+
    "\1\120\11\13\16\0\4\13\1\53\11\13\12\0\1\117"+
    "\2\0\2\13\1\271\2\13\1\0\14\13\1\120\11\13"+
    "\16\0\4\13\1\53\11\13\12\0\1\117\2\0\5\13"+
    "\1\0\3\13\1\272\10\13\1\120\11\13\16\0\4\13"+
    "\1\53\11\13\12\0\1\117\2\0\5\13\1\0\10\13"+
    "\1\273\3\13\1\120\11\13\16\0\4\13\1\53\11\13"+
    "\12\0\1\117\2\0\5\13\1\0\4\13\1\274\7\13"+
    "\1\120\11\13\16\0\4\13\1\53\11\13\36\0\1\275"+
    "\63\0\1\276\110\0\1\277\152\0\1\300\34\0\1\301"+
    "\117\0\1\302\103\0\1\303\102\0\1\304\56\0\2\210"+
    "\3\0\1\210\2\0\1\210\112\0\1\305\121\0\1\306"+
    "\104\0\1\307\107\0\1\310\46\0\2\311\3\0\1\311"+
    "\2\0\1\311\25\0\1\312\1\0\1\313\62\0\1\314"+
    "\113\0\1\315\74\0\1\316\107\0\1\317\122\0\1\320"+
    "\46\0\2\321\3\0\1\321\2\0\1\321\74\0\2\224"+
    "\3\0\1\224\2\0\1\224\125\0\1\322\64\0\1\121"+
    "\2\0\5\121\1\122\3\121\1\323\10\121\1\0\11\121"+
    "\16\0\4\121\1\0\11\121\12\0\1\227\2\0\5\227"+
    "\1\122\14\227\1\0\11\227\16\0\4\227\1\0\11\227"+
    "\12\0\1\227\2\0\1\227\1\324\1\325\2\227\1\122"+
    "\14\227\1\0\11\227\16\0\4\227\1\0\11\227\12\0"+
    "\1\227\2\0\1\227\1\326\3\227\1\122\14\227\1\0"+
    "\11\227\16\0\4\227\1\0\11\227\12\0\1\227\2\0"+
    "\5\227\1\122\2\227\1\327\11\227\1\0\11\227\16\0"+
    "\4\227\1\0\11\227\12\0\1\227\2\0\5\227\1\122"+
    "\3\227\1\330\10\227\1\0\11\227\16\0\4\227\1\0"+
    "\11\227\12\0\1\227\2\0\5\227\1\122\7\227\1\331"+
    "\4\227\1\0\11\227\16\0\4\227\1\0\11\227\12\0"+
    "\1\235\2\0\5\235\1\122\14\235\1\0\11\235\16\0"+
    "\4\235\1\0\11\235\12\0\1\117\2\0\1\13\1\332"+
    "\3\13\1\0\14\13\1\120\11\13\16\0\4\13\1\53"+
    "\11\13\12\0\1\117\2\0\5\13\1\0\14\13\1\120"+
    "\2\13\1\333\6\13\16\0\4\13\1\53\11\13\12\0"+
    "\1\117\2\0\5\13\1\0\2\13\1\334\11\13\1\120"+
    "\11\13\16\0\4\13\1\53\11\13\12\0\1\117\2\0"+
    "\1\335\4\13\1\0\14\13\1\120\11\13\16\0\4\13"+
    "\1\53\11\13\12\0\1\117\2\0\5\13\1\0\14\13"+
    "\1\120\4\13\1\336\4\13\16\0\4\13\1\53\11\13"+
    "\1\0\2\301\3\0\1\301\2\0\1\301\1\117\2\0"+
    "\5\13\1\0\14\13\1\120\11\13\16\0\4\13\1\53"+
    "\11\13\12\0\1\117\2\0\5\13\1\0\7\13\1\337"+
    "\4\13\1\120\11\13\16\0\4\13\1\53\11\13\12\0"+
    "\1\117\2\0\2\13\1\340\2\13\1\0\14\13\1\120"+
    "\11\13\16\0\4\13\1\53\11\13\12\0\1\117\2\0"+
    "\5\13\1\0\7\13\1\341\4\13\1\120\11\13\16\0"+
    "\4\13\1\53\11\13\1\0\2\304\3\0\1\304\2\0"+
    "\1\304\1\117\2\0\5\13\1\0\14\13\1\120\11\13"+
    "\16\0\4\13\1\53\11\13\12\0\1\117\2\0\5\13"+
    "\1\0\13\13\1\342\1\120\11\13\16\0\4\13\1\53"+
    "\11\13\12\0\1\117\2\0\5\13\1\0\10\13\1\343"+
    "\3\13\1\120\11\13\16\0\4\13\1\53\11\13\12\0"+
    "\1\117\2\0\5\13\1\0\13\13\1\344\1\120\11\13"+
    "\16\0\4\13\1\53\11\13\1\0\2\310\3\0\1\310"+
    "\2\0\1\310\1\120\2\0\5\120\1\0\14\120\1\0"+
    "\11\120\16\0\4\120\1\0\11\120\1\0\2\312\3\0"+
    "\1\312\2\0\1\312\1\120\2\0\5\120\1\0\14\120"+
    "\1\0\11\120\16\0\4\120\1\0\11\120\12\0\1\117"+
    "\2\0\5\13\1\0\14\13\1\120\2\13\1\345\6\13"+
    "\16\0\4\13\1\53\11\13\12\0\1\117\2\0\1\13"+
    "\1\346\3\13\1\0\14\13\1\120\11\13\16\0\4\13"+
    "\1\53\11\13\12\0\1\117\2\0\5\13\1\0\3\13"+
    "\1\347\10\13\1\120\11\13\16\0\4\13\1\53\11\13"+
    "\12\0\1\117\2\0\1\350\4\13\1\0\14\13\1\120"+
    "\11\13\16\0\4\13\1\53\11\13\12\0\1\117\2\0"+
    "\5\13\1\0\14\13\1\351\11\13\16\0\4\13\1\53"+
    "\11\13\12\0\1\117\2\0\5\13\1\0\10\13\1\352"+
    "\3\13\1\120\11\13\16\0\4\13\1\53\11\13\1\0"+
    "\2\353\3\0\1\353\2\0\1\353\1\120\2\0\5\120"+
    "\1\0\14\120\1\0\11\120\16\0\4\120\1\0\11\120"+
    "\12\0\1\117\2\0\1\13\1\354\3\13\1\0\14\13"+
    "\1\120\11\13\16\0\4\13\1\53\11\13\12\0\1\117"+
    "\2\0\5\13\1\0\14\13\1\120\11\13\16\0\4\13"+
    "\1\53\2\13\1\355\6\13\12\0\1\117\2\0\5\13"+
    "\1\0\14\13\1\120\6\13\1\356\2\13\16\0\4\13"+
    "\1\53\11\13\12\0\1\117\2\0\1\13\1\357\3\13"+
    "\1\0\14\13\1\120\11\13\16\0\4\13\1\53\11\13"+
    "\12\0\1\117\2\0\1\13\1\360\3\13\1\0\14\13"+
    "\1\120\11\13\16\0\4\13\1\53\11\13\12\0\1\117"+
    "\2\0\2\13\1\361\2\13\1\0\14\13\1\120\11\13"+
    "\16\0\4\13\1\53\11\13\12\0\1\117\2\0\5\13"+
    "\1\0\1\362\13\13\1\120\11\13\16\0\4\13\1\53"+
    "\11\13\12\0\1\117\2\0\5\13\1\0\14\13\1\120"+
    "\11\13\16\0\1\13\1\363\2\13\1\53\11\13\16\0"+
    "\1\364\122\0\1\365\114\0\1\366\41\0\2\301\3\0"+
    "\1\301\2\0\1\301\125\0\1\367\71\0\1\370\66\0"+
    "\2\304\3\0\1\304\2\0\1\304\131\0\1\371\104\0"+
    "\1\372\104\0\1\373\47\0\2\310\3\0\1\310\2\0"+
    "\1\310\74\0\2\311\3\0\1\311\2\0\1\311\74\0"+
    "\2\312\3\0\1\312\2\0\1\312\135\0\1\374\43\0"+
    "\2\375\3\0\1\375\2\0\1\375\112\0\1\376\113\0"+
    "\1\377\115\0\1\u0100\46\0\2\353\3\0\1\353\2\0"+
    "\1\353\135\0\1\u0101\54\0\1\121\2\0\5\121\1\122"+
    "\4\121\1\u0102\7\121\1\0\11\121\16\0\4\121\1\0"+
    "\11\121\12\0\1\227\2\0\2\227\1\u0103\2\227\1\122"+
    "\14\227\1\0\11\227\16\0\4\227\1\0\11\227\12\0"+
    "\1\227\2\0\4\227\1\u0104\1\122\14\227\1\0\11\227"+
    "\16\0\4\227\1\0\11\227\12\0\1\227\2\0\2\227"+
    "\1\u0105\2\227\1\122\14\227\1\0\11\227\16\0\4\227"+
    "\1\0\11\227\12\0\1\227\2\0\5\227\1\122\3\227"+
    "\1\u0106\10\227\1\0\11\227\16\0\4\227\1\0\11\227"+
    "\12\0\1\227\2\0\2\227\1\u0107\2\227\1\122\14\227"+
    "\1\0\11\227\16\0\4\227\1\0\11\227\12\0\1\227"+
    "\2\0\5\227\1\122\10\227\1\u0108\3\227\1\0\11\227"+
    "\16\0\4\227\1\0\11\227\12\0\1\117\2\0\5\13"+
    "\1\0\14\13\1\120\4\13\1\u0109\4\13\16\0\4\13"+
    "\1\53\11\13\12\0\1\117\2\0\5\13\1\0\11\13"+
    "\1\u010a\2\13\1\120\11\13\16\0\4\13\1\53\11\13"+
    "\12\0\1\117\2\0\1\13\1\u010b\3\13\1\0\14\13"+
    "\1\120\11\13\16\0\4\13\1\53\11\13\12\0\1\117"+
    "\2\0\5\13\1\0\10\13\1\u010c\3\13\1\120\11\13"+
    "\16\0\4\13\1\53\11\13\11\0\1\367\1\117\2\0"+
    "\5\13\1\0\14\13\1\120\11\13\16\0\4\13\1\53"+
    "\11\13\12\0\1\117\2\0\1\13\1\u010d\3\13\1\0"+
    "\14\13\1\120\11\13\16\0\4\13\1\53\11\13\12\0"+
    "\1\117\2\0\1\13\1\u010e\3\13\1\0\14\13\1\120"+
    "\11\13\16\0\4\13\1\53\11\13\12\0\1\117\2\0"+
    "\5\13\1\0\14\13\1\120\4\13\1\u010f\4\13\16\0"+
    "\4\13\1\53\11\13\12\0\1\117\2\0\1\13\1\u0110"+
    "\3\13\1\0\14\13\1\120\11\13\16\0\4\13\1\53"+
    "\11\13\12\0\1\117\2\0\4\13\1\u0111\1\0\14\13"+
    "\1\120\11\13\16\0\4\13\1\53\11\13\12\0\1\117"+
    "\2\0\5\13\1\0\14\13\1\u0112\11\13\16\0\4\13"+
    "\1\53\11\13\12\0\1\117\2\0\1\13\1\u0113\3\13"+
    "\1\0\14\13\1\120\11\13\16\0\4\13\1\53\11\13"+
    "\1\0\2\u0100\3\0\1\u0100\2\0\1\u0100\1\120\2\0"+
    "\5\120\1\0\14\120\1\0\11\120\16\0\4\120\1\0"+
    "\11\120\12\0\1\117\2\0\5\13\1\0\14\13\1\120"+
    "\2\13\1\u0114\6\13\16\0\4\13\1\53\11\13\12\0"+
    "\1\117\2\0\1\u0115\4\13\1\0\14\13\1\u0116\11\13"+
    "\16\0\4\13\1\53\11\13\12\0\1\117\2\0\5\13"+
    "\1\0\1\13\1\u0117\12\13\1\120\11\13\16\0\4\13"+
    "\1\53\11\13\12\0\1\117\2\0\5\13\1\0\11\13"+
    "\1\u0118\2\13\1\120\11\13\16\0\4\13\1\53\11\13"+
    "\12\0\1\117\2\0\5\13\1\0\14\13\1\u0119\11\13"+
    "\16\0\4\13\1\53\11\13\12\0\1\117\2\0\5\13"+
    "\1\0\3\13\1\u011a\10\13\1\120\11\13\16\0\4\13"+
    "\1\53\11\13\12\0\1\117\2\0\4\13\1\u011b\1\0"+
    "\14\13\1\120\11\13\16\0\4\13\1\53\11\13\12\0"+
    "\1\117\2\0\1\13\1\u011c\3\13\1\0\14\13\1\120"+
    "\11\13\16\0\4\13\1\53\11\13\12\0\1\117\2\0"+
    "\5\13\1\0\14\13\1\u011d\11\13\16\0\4\13\1\53"+
    "\11\13\37\0\1\u011e\107\0\1\u011f\75\0\1\u0120\62\0"+
    "\1\367\135\0\1\u0121\60\0\1\u0122\104\0\1\u0123\105\0"+
    "\1\u0124\112\0\1\u0125\116\0\1\u0126\46\0\2\u0100\3\0"+
    "\1\u0100\2\0\1\u0100\111\0\1\u0127\100\0\1\121\2\0"+
    "\5\121\1\u0128\14\121\1\0\11\121\16\0\4\121\1\0"+
    "\11\121\12\0\1\227\2\0\3\227\1\u0129\1\227\1\122"+
    "\14\227\1\0\11\227\16\0\4\227\1\0\11\227\12\0"+
    "\1\227\2\0\5\227\1\122\2\227\1\u012a\11\227\1\0"+
    "\11\227\16\0\4\227\1\0\11\227\12\0\1\227\2\0"+
    "\3\227\1\u012b\1\227\1\122\14\227\1\0\11\227\16\0"+
    "\4\227\1\0\11\227\12\0\1\227\2\0\5\227\1\122"+
    "\4\227\1\u012c\7\227\1\0\11\227\16\0\4\227\1\0"+
    "\11\227\12\0\1\227\2\0\5\227\1\u012d\14\227\1\0"+
    "\11\227\16\0\4\227\1\0\11\227\12\0\1\227\2\0"+
    "\1\u012e\4\227\1\122\14\227\1\0\11\227\16\0\4\227"+
    "\1\0\11\227\12\0\1\117\2\0\1\13\1\u012f\3\13"+
    "\1\0\14\13\1\120\11\13\16\0\4\13\1\53\11\13"+
    "\12\0\1\117\2\0\5\13\1\0\3\13\1\u0130\10\13"+
    "\1\120\11\13\16\0\4\13\1\53\11\13\12\0\1\117"+
    "\2\0\2\13\1\u0131\2\13\1\0\14\13\1\120\11\13"+
    "\16\0\4\13\1\53\11\13\12\0\1\117\2\0\1\u0132"+
    "\4\13\1\0\14\13\1\120\11\13\16\0\4\13\1\53"+
    "\11\13\12\0\1\117\2\0\4\13\1\u0133\1\0\14\13"+
    "\1\120\11\13\16\0\4\13\1\53\11\13\12\0\1\117"+
    "\2\0\1\13\1\u0134\3\13\1\0\14\13\1\120\11\13"+
    "\16\0\4\13\1\53\11\13\12\0\1\117\2\0\4\13"+
    "\1\u0135\1\0\14\13\1\120\11\13\16\0\4\13\1\53"+
    "\11\13\12\0\1\117\2\0\5\13\1\0\3\13\1\u0136"+
    "\10\13\1\120\11\13\16\0\4\13\1\53\11\13\12\0"+
    "\1\117\2\0\5\13\1\0\7\13\1\u0137\4\13\1\120"+
    "\11\13\16\0\4\13\1\53\11\13\12\0\1\117\2\0"+
    "\5\13\1\0\13\13\1\u0138\1\120\11\13\16\0\4\13"+
    "\1\53\11\13\12\0\1\117\2\0\5\13\1\0\7\13"+
    "\1\u0139\4\13\1\120\11\13\16\0\4\13\1\53\11\13"+
    "\12\0\1\117\2\0\5\13\1\0\4\13\1\u013a\7\13"+
    "\1\120\11\13\16\0\4\13\1\53\11\13\12\0\1\117"+
    "\2\0\5\13\1\0\4\13\1\u013b\7\13\1\120\11\13"+
    "\16\0\4\13\1\53\11\13\12\0\1\117\2\0\5\13"+
    "\1\0\10\13\1\u013c\3\13\1\120\11\13\16\0\4\13"+
    "\1\53\11\13\12\0\1\117\2\0\5\13\1\0\14\13"+
    "\1\u013d\11\13\16\0\4\13\1\53\11\13\1\0\2\u011e"+
    "\3\0\1\u011e\2\0\1\u011e\114\0\1\u013e\102\0\1\u013f"+
    "\104\0\1\u0140\106\0\1\u0141\104\0\1\u0142\64\0\2\u0143"+
    "\3\0\1\u0143\2\0\1\u0143\137\0\1\u0144\77\0\1\u0145"+
    "\57\0\1\227\2\0\2\227\1\u0146\2\227\1\122\14\227"+
    "\1\0\11\227\16\0\4\227\1\0\11\227\12\0\1\227"+
    "\2\0\5\227\1\122\3\227\1\u0147\10\227\1\0\11\227"+
    "\16\0\4\227\1\0\11\227\12\0\1\227\2\0\2\227"+
    "\1\u0148\2\227\1\122\14\227\1\0\11\227\16\0\4\227"+
    "\1\0\11\227\12\0\1\227\2\0\5\227\1\u0149\14\227"+
    "\1\0\11\227\16\0\4\227\1\0\11\227\12\0\1\227"+
    "\2\0\1\u014a\4\227\1\122\14\227\1\0\11\227\16\0"+
    "\4\227\1\0\11\227\12\0\1\117\2\0\5\13\1\0"+
    "\3\13\1\u014b\10\13\1\120\11\13\16\0\4\13\1\53"+
    "\11\13\12\0\1\117\2\0\5\13\1\0\6\13\1\u014c"+
    "\5\13\1\120\11\13\16\0\4\13\1\53\11\13\12\0"+
    "\1\117\2\0\2\13\1\u014d\2\13\1\0\14\13\1\120"+
    "\11\13\16\0\4\13\1\53\11\13\12\0\1\117\2\0"+
    "\2\13\1\u014e\2\13\1\0\14\13\1\120\11\13\16\0"+
    "\4\13\1\53\11\13\12\0\1\117\2\0\2\13\1\u014f"+
    "\2\13\1\0\14\13\1\120\11\13\16\0\4\13\1\53"+
    "\11\13\12\0\1\117\2\0\5\13\1\0\14\13\1\u0150"+
    "\11\13\16\0\4\13\1\53\11\13\12\0\1\117\2\0"+
    "\2\13\1\u0151\2\13\1\0\14\13\1\120\11\13\16\0"+
    "\4\13\1\53\11\13\12\0\1\117\2\0\5\13\1\0"+
    "\10\13\1\u0152\3\13\1\120\11\13\16\0\4\13\1\53"+
    "\11\13\12\0\1\117\2\0\5\13\1\0\11\13\1\u0153"+
    "\2\13\1\120\11\13\16\0\4\13\1\53\11\13\12\0"+
    "\1\117\2\0\1\u0154\4\13\1\0\14\13\1\120\11\13"+
    "\16\0\4\13\1\53\11\13\12\0\1\117\2\0\1\u0155"+
    "\4\13\1\0\14\13\1\120\11\13\16\0\4\13\1\53"+
    "\11\13\12\0\1\117\2\0\5\13\1\0\6\13\1\u0156"+
    "\5\13\1\120\11\13\16\0\4\13\1\53\11\13\31\0"+
    "\1\u0157\70\0\1\u0158\106\0\1\u0159\104\0\1\u015a\103\0"+
    "\1\u015b\67\0\2\u015c\3\0\1\u015c\2\0\1\u015c\105\0"+
    "\1\227\2\0\2\227\1\u015d\2\227\1\122\14\227\1\0"+
    "\11\227\16\0\4\227\1\0\11\227\12\0\1\227\2\0"+
    "\5\227\1\122\1\u015e\13\227\1\0\11\227\16\0\4\227"+
    "\1\0\11\227\12\0\1\227\2\0\2\227\1\u015f\2\227"+
    "\1\122\14\227\1\0\11\227\16\0\4\227\1\0\11\227"+
    "\12\0\1\227\2\0\5\227\1\u0160\14\227\1\0\11\227"+
    "\16\0\4\227\1\0\11\227\12\0\1\117\2\0\2\13"+
    "\1\u0161\2\13\1\0\14\13\1\120\11\13\16\0\4\13"+
    "\1\53\11\13\12\0\1\117\2\0\1\13\1\u0162\3\13"+
    "\1\0\14\13\1\120\11\13\16\0\4\13\1\53\11\13"+
    "\12\0\1\117\2\0\5\13\1\0\2\13\1\u0163\11\13"+
    "\1\120\11\13\16\0\4\13\1\53\11\13\12\0\1\117"+
    "\2\0\1\13\1\u0164\3\13\1\0\14\13\1\120\11\13"+
    "\16\0\4\13\1\53\11\13\12\0\1\117\2\0\5\13"+
    "\1\0\2\13\1\u0165\11\13\1\120\11\13\16\0\4\13"+
    "\1\53\11\13\12\0\1\117\2\0\5\13\1\0\14\13"+
    "\1\u0166\11\13\16\0\4\13\1\53\11\13\12\0\1\117"+
    "\2\0\5\13\1\0\6\13\1\u0167\5\13\1\120\11\13"+
    "\16\0\4\13\1\53\11\13\12\0\1\117\2\0\5\13"+
    "\1\0\14\13\1\120\11\13\16\0\1\u0168\3\13\1\53"+
    "\11\13\12\0\1\117\2\0\5\13\1\0\14\13\1\u0169"+
    "\11\13\16\0\4\13\1\53\11\13\12\0\1\117\2\0"+
    "\5\13\1\0\14\13\1\u016a\11\13\16\0\4\13\1\53"+
    "\11\13\12\0\1\117\2\0\2\13\1\u016b\2\13\1\0"+
    "\14\13\1\120\11\13\16\0\4\13\1\53\11\13\16\0"+
    "\1\u016c\125\0\1\u016d\72\0\1\u016e\104\0\1\u016f\60\0"+
    "\2\u0170\3\0\1\u0170\2\0\1\u0170\105\0\1\227\2\0"+
    "\4\227\1\u0171\1\122\14\227\1\0\11\227\16\0\4\227"+
    "\1\0\11\227\12\0\1\227\2\0\5\227\1\u0172\14\227"+
    "\1\0\11\227\16\0\4\227\1\0\11\227\12\0\1\227"+
    "\2\0\4\227\1\u0173\1\122\14\227\1\0\11\227\16\0"+
    "\4\227\1\0\11\227\12\0\1\117\2\0\1\u0174\4\13"+
    "\1\0\14\13\1\120\11\13\16\0\4\13\1\53\11\13"+
    "\12\0\1\117\2\0\5\13\1\u0175\14\13\1\120\11\13"+
    "\16\0\4\13\1\53\11\13\12\0\1\117\2\0\1\13"+
    "\1\u0176\3\13\1\0\14\13\1\120\11\13\16\0\4\13"+
    "\1\53\11\13\12\0\1\117\2\0\4\13\1\u0177\1\0"+
    "\14\13\1\120\11\13\16\0\4\13\1\53\11\13\12\0"+
    "\1\117\2\0\1\13\1\u0178\3\13\1\0\14\13\1\120"+
    "\11\13\16\0\4\13\1\53\11\13\12\0\1\117\2\0"+
    "\1\13\1\u0179\3\13\1\0\14\13\1\120\11\13\16\0"+
    "\4\13\1\53\11\13\12\0\1\117\2\0\5\13\1\0"+
    "\14\13\1\u017a\11\13\16\0\4\13\1\53\11\13\12\0"+
    "\1\117\2\0\5\13\1\0\14\13\1\u017b\11\13\16\0"+
    "\4\13\1\53\11\13\15\0\1\u017c\70\0\2\u016d\3\0"+
    "\1\u016d\2\0\1\u016d\111\0\1\u017d\104\0\1\u017e\100\0"+
    "\1\227\2\0\5\227\1\u017f\14\227\1\0\11\227\16\0"+
    "\4\227\1\0\11\227\12\0\1\227\2\0\5\227\1\u0180"+
    "\14\227\1\0\11\227\16\0\4\227\1\0\11\227\12\0"+
    "\1\117\2\0\5\13\1\0\14\13\1\u0181\11\13\16\0"+
    "\4\13\1\53\11\13\12\0\1\117\2\0\1\u0182\4\13"+
    "\1\0\14\13\1\120\11\13\16\0\4\13\1\53\11\13"+
    "\12\0\1\117\2\0\1\u0183\4\13\1\0\14\13\1\120"+
    "\11\13\16\0\4\13\1\53\11\13\12\0\1\117\2\0"+
    "\1\u0184\4\13\1\0\14\13\1\120\11\13\16\0\4\13"+
    "\1\53\11\13\12\0\1\117\2\0\1\u0185\4\13\1\0"+
    "\14\13\1\120\11\13\16\0\4\13\1\53\11\13\37\0"+
    "\1\u0186\62\0\1\u0187\104\0\1\u0188\101\0\1\117\2\0"+
    "\5\13\1\0\14\13\1\u0189\11\13\16\0\4\13\1\53"+
    "\11\13\12\0\1\117\2\0\5\13\1\0\14\13\1\u018a"+
    "\11\13\16\0\4\13\1\53\11\13\12\0\1\117\2\0"+
    "\5\13\1\0\14\13\1\u018b\11\13\16\0\4\13\1\53"+
    "\11\13\12\0\1\117\2\0\5\13\1\0\14\13\1\u018c"+
    "\11\13\16\0\4\13\1\53\11\13\1\0\2\u0186\3\0"+
    "\1\u0186\2\0\1\u0186\132\0\1\u018d\104\0\1\u018e\46\0"+
    "\2\u018e\3\0\1\u018e\2\0\1\u018e\1\120\2\0\5\120"+
    "\1\0\14\120\1\0\11\120\16\0\4\120\1\0\11\120"+
    "\1\0\2\u018e\3\0\1\u018e\2\0\1\u018e\73\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[24012];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\35\1\1\11\1\1\1\11\1\1\1\11"+
    "\17\1\12\0\1\1\6\0\1\1\1\0\1\1\2\0"+
    "\1\11\3\0\1\1\1\0\2\1\1\11\3\1\1\0"+
    "\51\1\10\0\1\1\13\0\1\1\1\0\7\1\1\0"+
    "\37\1\3\0\1\11\1\1\2\0\1\1\3\0\3\1"+
    "\6\0\1\1\1\0\30\1\1\11\10\1\3\0\1\1"+
    "\1\11\4\0\1\1\2\0\1\1\1\0\35\1\7\0"+
    "\1\11\1\0\1\11\4\1\1\11\20\1\1\0\1\11"+
    "\3\0\1\1\2\0\3\1\1\11\15\1\5\0\4\1"+
    "\1\11\13\1\1\0\1\1\2\0\2\1\1\11\2\1"+
    "\1\11\6\1\3\0\2\11\6\1\2\0\4\1\1\11"+
    "\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[398];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  public _MuranoHLexer() {
    this((java.io.Reader)null);
  }


  public _MuranoHLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _MuranoHLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1340) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 45: 
          { return NULL_TOKEN;
          }
        case 85: break;
        case 44: 
          { return MPL_BOOL_TRUE;
          }
        case 86: break;
        case 60: 
          { return ACTION_TOKEN;
          }
        case 87: break;
        case 32: 
          { return OP_GE;
          }
        case 88: break;
        case 77: 
          { return FN_SETATTR_TOKEN;
          }
        case 89: break;
        case 40: 
          { return IF_TOKEN;
          }
        case 90: break;
        case 82: 
          { return PARAMETERS_TOKEN;
          }
        case 91: break;
        case 36: 
          { return INDENT;
          }
        case 92: break;
        case 27: 
          { return METHOD_CALL_TOKEN;
          }
        case 93: break;
        case 67: 
          { return FN_CLASS_TOKEN;
          }
        case 94: break;
        case 63: 
          { return USAGE_INOUT_TOKEN;
          }
        case 95: break;
        case 52: 
          { return THEN_TOKEN;
          }
        case 96: break;
        case 5: 
          { return NUMBER;
          }
        case 97: break;
        case 1: 
          { return ID;
          }
        case 98: break;
        case 53: 
          { return BOOL_TOKEN_F;
          }
        case 99: break;
        case 10: 
          { return OP_EQ;
          }
        case 100: break;
        case 50: 
          { return USAGE_OUT_TOKEN;
          }
        case 101: break;
        case 70: 
          { return EXTENDS_TOKEN;
          }
        case 102: break;
        case 23: 
          { return OP_N;
          }
        case 103: break;
        case 66: 
          { return HVALUE_TOKEN;
          }
        case 104: break;
        case 8: 
          { return LPAREN_TOKEN;
          }
        case 105: break;
        case 37: 
          { return FN_NEW_TOKEN;
          }
        case 106: break;
        case 78: 
          { return FN_GETATTR_TOKEN;
          }
        case 107: break;
        case 61: 
          { return FN_FORMAT_TOKEN;
          }
        case 108: break;
        case 72: 
          { return USAGE_RUNTIME_TOKEN;
          }
        case 109: break;
        case 3: 
          { return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 110: break;
        case 18: 
          { return OP_MULT;
          }
        case 111: break;
        case 65: 
          { return RETURN_TOKEN;
          }
        case 112: break;
        case 33: 
          { return OP_MINUS;
          }
        case 113: break;
        case 6: 
          { return DOT_TOKEN;
          }
        case 114: break;
        case 58: 
          { return FN_BIND_TOKEN;
          }
        case 115: break;
        case 48: 
          { return FOR_TOKEN;
          }
        case 116: break;
        case 38: 
          { return OP_NOT;
          }
        case 117: break;
        case 17: 
          { return OP_PLUS;
          }
        case 118: break;
        case 80: 
          { return HRESOURCES_TOKEN;
          }
        case 119: break;
        case 29: 
          { return PROPERTY_TOKEN;
          }
        case 120: break;
        case 56: 
          { return BODY_TOKEN;
          }
        case 121: break;
        case 46: 
          { return FN_DICT_TOKEN;
          }
        case 122: break;
        case 71: 
          { return HOUTPUTS_TOKEN;
          }
        case 123: break;
        case 68: 
          { return DEFAULT_TOKEN;
          }
        case 124: break;
        case 62: 
          { return USAGE_TOKEN;
          }
        case 125: break;
        case 15: 
          { return LSQBR_TOKEN;
          }
        case 126: break;
        case 59: 
          { return FN_INT_TOKEN;
          }
        case 127: break;
        case 26: 
          { return SUBITEM_TOKEN;
          }
        case 128: break;
        case 42: 
          { return USAGE_IN_TOKEN;
          }
        case 129: break;
        case 75: 
          { return WORKFLOW_TOKEN;
          }
        case 130: break;
        case 83: 
          { return HPROPERTIES_TOKEN;
          }
        case 131: break;
        case 74: 
          { return FN_COAL_TOKEN;
          }
        case 132: break;
        case 21: 
          { return OP_LS;
          }
        case 133: break;
        case 69: 
          { return METHODS_TOKEN;
          }
        case 134: break;
        case 57: 
          { return HTYPE_TOKEN;
          }
        case 135: break;
        case 25: 
          { return CLASS_NS_TOKEN;
          }
        case 136: break;
        case 14: 
          { return RBRAKETS_TOKEN;
          }
        case 137: break;
        case 31: 
          { return MAP_TOKEN;
          }
        case 138: break;
        case 13: 
          { return LBRAKETS_TOKEN;
          }
        case 139: break;
        case 4: 
          { return COMMENT_TOKEN;
          }
        case 140: break;
        case 39: 
          { return OP_AND;
          }
        case 141: break;
        case 54: 
          { return NAME_TOKEN;
          }
        case 142: break;
        case 30: 
          { return OP_OR;
          }
        case 143: break;
        case 55: 
          { return ELSE_TOKEN;
          }
        case 144: break;
        case 73: 
          { return FN_STRING_TOKEN;
          }
        case 145: break;
        case 43: 
          { return DEFAULTNS_TOKEN;
          }
        case 146: break;
        case 12: 
          { return RPAREN_TOKEN;
          }
        case 147: break;
        case 76: 
          { return CONTRACT_TOKEN;
          }
        case 148: break;
        case 84: 
          { return NAMESPACE_TOKEN;
          }
        case 149: break;
        case 9: 
          { return ASSIGN_TOKEN;
          }
        case 150: break;
        case 22: 
          { return OP_NEG;
          }
        case 151: break;
        case 35: 
          { return OP_NE;
          }
        case 152: break;
        case 24: 
          { return STRING;
          }
        case 153: break;
        case 41: 
          { return IN_TOKEN;
          }
        case 154: break;
        case 81: 
          { return PROPERTIES_TOKEN;
          }
        case 155: break;
        case 7: 
          { return DOLLAR_TOKEN;
          }
        case 156: break;
        case 20: 
          { return COMMA_TOKEN;
          }
        case 157: break;
        case 2: 
          { return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 158: break;
        case 47: 
          { return BOOL_TOKEN_T;
          }
        case 159: break;
        case 34: 
          { return OP_LE;
          }
        case 160: break;
        case 64: 
          { return FN_FIND_TOKEN;
          }
        case 161: break;
        case 79: 
          { return ARGUMENTS_TOKEN;
          }
        case 162: break;
        case 11: 
          { return OP_GR;
          }
        case 163: break;
        case 16: 
          { return RSQBR_TOKEN;
          }
        case 164: break;
        case 49: 
          { return DO_TOKEN;
          }
        case 165: break;
        case 19: 
          { return OP_DIV;
          }
        case 166: break;
        case 28: 
          { return VARIABLE_TOKEN;
          }
        case 167: break;
        case 51: 
          { return MPL_BOOL_FALSE;
          }
        case 168: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
