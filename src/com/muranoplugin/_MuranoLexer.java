/* The following code was generated by JFlex 1.4.3 on 9/12/14 12:20 PM */

package com.muranoplugin;
import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import static com.muranoplugin.psi.MuranoTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 9/12/14 12:20 PM from the specification file
 * <tt>/Users/gokrokve/IdeaProjects/MuranoCode/src/com/muranoplugin/_MuranoLexer.flex</tt>
 */
public class _MuranoLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\11\1\4\1\6\1\1\1\1\22\0\1\11\1\61\1\5"+
    "\1\7\1\103\2\0\1\2\1\44\1\45\1\53\1\52\1\55\1\40"+
    "\1\13\1\54\12\12\1\24\1\0\1\60\1\36\1\37\2\0\1\77"+
    "\1\102\1\76\1\43\1\74\1\42\2\67\1\25\2\67\1\104\1\73"+
    "\1\70\1\27\1\14\1\67\1\31\1\67\1\34\1\101\1\67\1\71"+
    "\3\67\1\50\1\3\1\51\1\10\1\67\1\0\1\56\1\67\1\63"+
    "\1\57\1\20\1\33\1\100\1\35\1\22\1\64\1\72\1\41\1\32"+
    "\1\26\1\16\1\17\1\67\1\15\1\23\1\21\1\30\1\66\1\62"+
    "\1\75\1\65\1\67\1\46\1\0\1\47\54\0\1\67\12\0\1\67"+
    "\4\0\1\67\5\0\27\67\1\0\37\67\1\0\u013f\67\31\0\162\67"+
    "\4\0\14\67\16\0\5\67\11\0\1\67\213\0\1\67\13\0\1\67"+
    "\1\0\3\67\1\0\1\67\1\0\24\67\1\0\54\67\1\0\46\67"+
    "\1\0\5\67\4\0\202\67\10\0\105\67\1\0\46\67\2\0\2\67"+
    "\6\0\20\67\41\0\46\67\2\0\1\67\7\0\47\67\110\0\33\67"+
    "\5\0\3\67\56\0\32\67\5\0\13\67\25\0\12\67\4\0\2\67"+
    "\1\0\143\67\1\0\1\67\17\0\2\67\7\0\17\67\2\0\1\67"+
    "\20\0\1\67\1\0\36\67\35\0\3\67\60\0\46\67\13\0\1\67"+
    "\u0152\0\66\67\3\0\1\67\22\0\1\67\7\0\12\67\4\0\12\67"+
    "\25\0\10\67\2\0\2\67\2\0\26\67\1\0\7\67\1\0\1\67"+
    "\3\0\4\67\3\0\1\67\36\0\2\67\1\0\3\67\4\0\14\67"+
    "\23\0\6\67\4\0\2\67\2\0\26\67\1\0\7\67\1\0\2\67"+
    "\1\0\2\67\1\0\2\67\37\0\4\67\1\0\1\67\7\0\12\67"+
    "\2\0\3\67\20\0\11\67\1\0\3\67\1\0\26\67\1\0\7\67"+
    "\1\0\2\67\1\0\5\67\3\0\1\67\22\0\1\67\17\0\2\67"+
    "\4\0\12\67\25\0\10\67\2\0\2\67\2\0\26\67\1\0\7\67"+
    "\1\0\2\67\1\0\5\67\3\0\1\67\36\0\2\67\1\0\3\67"+
    "\4\0\12\67\1\0\1\67\21\0\1\67\1\0\6\67\3\0\3\67"+
    "\1\0\4\67\3\0\2\67\1\0\1\67\1\0\2\67\3\0\2\67"+
    "\3\0\3\67\3\0\10\67\1\0\3\67\55\0\11\67\25\0\10\67"+
    "\1\0\3\67\1\0\27\67\1\0\12\67\1\0\5\67\46\0\2\67"+
    "\4\0\12\67\25\0\10\67\1\0\3\67\1\0\27\67\1\0\12\67"+
    "\1\0\5\67\3\0\1\67\40\0\1\67\1\0\2\67\4\0\12\67"+
    "\25\0\10\67\1\0\3\67\1\0\27\67\1\0\20\67\46\0\2\67"+
    "\4\0\12\67\25\0\22\67\3\0\30\67\1\0\11\67\1\0\1\67"+
    "\2\0\7\67\72\0\60\67\1\0\2\67\14\0\7\67\11\0\12\67"+
    "\47\0\2\67\1\0\1\67\2\0\2\67\1\0\1\67\2\0\1\67"+
    "\6\0\4\67\1\0\7\67\1\0\3\67\1\0\1\67\1\0\1\67"+
    "\2\0\2\67\1\0\4\67\1\0\2\67\11\0\1\67\2\0\5\67"+
    "\1\0\1\67\11\0\12\67\2\0\2\67\42\0\1\67\37\0\12\67"+
    "\26\0\10\67\1\0\42\67\35\0\4\67\164\0\42\67\1\0\5\67"+
    "\1\0\2\67\25\0\12\67\6\0\6\67\112\0\46\67\12\0\51\67"+
    "\7\0\132\67\5\0\104\67\5\0\122\67\6\0\7\67\1\0\77\67"+
    "\1\0\1\67\1\0\4\67\2\0\7\67\1\0\1\67\1\0\4\67"+
    "\2\0\47\67\1\0\1\67\1\0\4\67\2\0\37\67\1\0\1\67"+
    "\1\0\4\67\2\0\7\67\1\0\1\67\1\0\4\67\2\0\7\67"+
    "\1\0\7\67\1\0\27\67\1\0\37\67\1\0\1\67\1\0\4\67"+
    "\2\0\7\67\1\0\47\67\1\0\23\67\16\0\11\67\56\0\125\67"+
    "\14\0\u026c\67\2\0\10\67\12\0\32\67\5\0\113\67\25\0\15\67"+
    "\1\0\4\67\16\0\22\67\16\0\22\67\16\0\15\67\1\0\3\67"+
    "\17\0\64\67\43\0\1\67\4\0\1\67\3\0\12\67\46\0\12\67"+
    "\6\0\130\67\10\0\51\67\127\0\35\67\51\0\50\67\2\0\5\67"+
    "\u038b\0\154\67\224\0\234\67\4\0\132\67\6\0\26\67\2\0\6\67"+
    "\2\0\46\67\2\0\6\67\2\0\10\67\1\0\1\67\1\0\1\67"+
    "\1\0\1\67\1\0\37\67\2\0\65\67\1\0\7\67\1\0\1\67"+
    "\3\0\3\67\1\0\7\67\3\0\4\67\2\0\6\67\4\0\15\67"+
    "\5\0\3\67\1\0\7\67\164\0\1\67\15\0\1\67\202\0\1\67"+
    "\4\0\1\67\2\0\12\67\1\0\1\67\3\0\5\67\6\0\1\67"+
    "\1\0\1\67\1\0\1\67\1\0\4\67\1\0\3\67\1\0\7\67"+
    "\3\0\3\67\5\0\5\67\u0ebb\0\2\67\52\0\5\67\5\0\2\67"+
    "\4\0\126\67\6\0\3\67\1\0\132\67\1\0\4\67\5\0\50\67"+
    "\4\0\136\67\21\0\30\67\70\0\20\67\u0200\0\u19b6\67\112\0\u51a6\67"+
    "\132\0\u048d\67\u0773\0\u2ba4\67\u215c\0\u012e\67\2\0\73\67\225\0\7\67"+
    "\14\0\5\67\5\0\1\67\1\0\12\67\1\0\15\67\1\0\5\67"+
    "\1\0\1\67\1\0\2\67\1\0\2\67\1\0\154\67\41\0\u016b\67"+
    "\22\0\100\67\2\0\66\67\50\0\14\67\164\0\5\67\1\0\207\67"+
    "\23\0\12\67\7\0\32\67\6\0\32\67\13\0\131\67\3\0\6\67"+
    "\2\0\6\67\2\0\6\67\2\0\3\67\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\1\3\2\1\3\1\4\1\5\5\6"+
    "\1\7\5\6\1\10\1\11\1\2\2\6\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\2\6\1\24\1\25\11\6\1\26\1\1\14\0\1\10"+
    "\5\0\1\27\3\0\1\30\3\0\1\4\2\6\1\31"+
    "\14\6\1\10\1\32\1\11\1\33\1\34\6\6\1\24"+
    "\1\35\1\27\1\36\14\6\2\0\1\31\15\0\1\37"+
    "\6\0\4\6\1\40\1\41\1\42\1\43\10\6\1\0"+
    "\1\6\1\44\5\6\1\45\1\46\7\6\5\0\1\47"+
    "\1\0\1\42\1\43\5\0\1\50\1\0\1\44\3\0"+
    "\3\6\1\51\1\52\3\6\1\53\1\6\1\54\1\6"+
    "\1\55\1\6\1\56\1\57\12\6\6\0\1\52\1\60"+
    "\3\0\1\56\1\57\1\0\5\6\1\61\1\62\1\63"+
    "\2\6\1\64\2\6\1\65\5\6\1\66\4\0\1\67"+
    "\4\0\4\6\1\70\7\6\1\71\1\72\4\0\1\73"+
    "\1\0\1\70\1\0\3\6\1\74\7\6\5\0\1\75"+
    "\3\6\1\76\2\6\1\77\1\100\2\6\2\0\1\101"+
    "\1\0\1\102\4\6\1\103\1\104\1\6\3\0\4\6"+
    "\1\105\1\0\1\106\1\0\1\107\1\110\1\111\1\112";

  private static int [] zzUnpackAction() {
    int [] result = new int[340];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\105\0\212\0\317\0\u0114\0\u0159\0\u019e\0\u01e3"+
    "\0\105\0\u0228\0\u026d\0\u02b2\0\u02f7\0\u033c\0\u0381\0\u03c6"+
    "\0\u040b\0\u0450\0\u0495\0\u04da\0\u051f\0\u0564\0\u05a9\0\u05ee"+
    "\0\u0633\0\u0678\0\105\0\u06bd\0\105\0\u0702\0\105\0\u0747"+
    "\0\u078c\0\u07d1\0\u0816\0\u085b\0\u08a0\0\u08e5\0\u092a\0\u096f"+
    "\0\u09b4\0\u09f9\0\u0a3e\0\u0a83\0\u0ac8\0\u0b0d\0\u0b52\0\u0b97"+
    "\0\105\0\u0bdc\0\u0c21\0\u0c66\0\u0cab\0\u0cf0\0\u0d35\0\u0d7a"+
    "\0\u0dbf\0\u0e04\0\u0e49\0\u0e8e\0\u0ed3\0\u0f18\0\u0f5d\0\u0fa2"+
    "\0\u0fe7\0\u102c\0\u1071\0\u10b6\0\u092a\0\u10fb\0\u1140\0\317"+
    "\0\105\0\u1185\0\u0114\0\u11ca\0\u120f\0\u1254\0\u1299\0\u12de"+
    "\0\u1323\0\u1368\0\u13ad\0\u13f2\0\u1437\0\u147c\0\u14c1\0\u1506"+
    "\0\u154b\0\u1590\0\u15d5\0\u161a\0\u165f\0\u16a4\0\u16e9\0\u172e"+
    "\0\u1773\0\u17b8\0\u17fd\0\u1842\0\u1887\0\u18cc\0\u1911\0\u1956"+
    "\0\u199b\0\u19e0\0\u1a25\0\u1a6a\0\u1aaf\0\u1af4\0\u1b39\0\u1b7e"+
    "\0\u1bc3\0\u1c08\0\u1c4d\0\u1c92\0\u1cd7\0\u1d1c\0\u1d61\0\u1da6"+
    "\0\u1deb\0\u1e30\0\u1e75\0\u1eba\0\u1eff\0\u1f44\0\u1f89\0\u1fce"+
    "\0\u2013\0\u2058\0\u209d\0\u20e2\0\u2127\0\u216c\0\u21b1\0\u21f6"+
    "\0\u223b\0\u2280\0\u22c5\0\u230a\0\u234f\0\u2394\0\u23d9\0\u241e"+
    "\0\u2463\0\u24a8\0\u24ed\0\u2532\0\u2577\0\u026d\0\u25bc\0\u2601"+
    "\0\u2646\0\u268b\0\u26d0\0\u2715\0\u275a\0\u279f\0\u27e4\0\u2829"+
    "\0\u286e\0\u28b3\0\u28f8\0\u293d\0\u2982\0\u29c7\0\u026d\0\u026d"+
    "\0\u2a0c\0\u2a51\0\u2a96\0\u2adb\0\u2b20\0\u2b65\0\u2baa\0\u2bef"+
    "\0\u2c34\0\u2c79\0\u2cbe\0\u2d03\0\u2d48\0\u2d8d\0\u2dd2\0\105"+
    "\0\u2e17\0\u2e5c\0\u2ea1\0\u2ee6\0\u2f2b\0\u21b1\0\u2f70\0\u2fb5"+
    "\0\u2ffa\0\u303f\0\u3084\0\u30c9\0\u310e\0\u3153\0\u026d\0\u3198"+
    "\0\u31dd\0\u3222\0\u3267\0\u026d\0\u32ac\0\u32f1\0\u3336\0\105"+
    "\0\u337b\0\u026d\0\u026d\0\u33c0\0\u3405\0\u344a\0\u348f\0\u34d4"+
    "\0\u3519\0\u355e\0\u35a3\0\u35e8\0\u362d\0\u3672\0\u36b7\0\u36fc"+
    "\0\u3741\0\u3786\0\u37cb\0\u3810\0\u2e5c\0\u3855\0\u389a\0\u38df"+
    "\0\105\0\105\0\u3924\0\u3969\0\u39ae\0\u39f3\0\u3a38\0\u3a7d"+
    "\0\u026d\0\105\0\u026d\0\u3ac2\0\u3b07\0\105\0\u3b4c\0\u3b91"+
    "\0\105\0\u3bd6\0\u3c1b\0\u3c60\0\u3ca5\0\u3cea\0\105\0\u3d2f"+
    "\0\u3d74\0\u3db9\0\u3dfe\0\u3e43\0\u3e88\0\u3ecd\0\u3f12\0\u3f57"+
    "\0\u3f9c\0\u3fe1\0\u4026\0\u406b\0\u026d\0\u40b0\0\u40f5\0\u413a"+
    "\0\u417f\0\u41c4\0\u4209\0\u424e\0\u026d\0\105\0\u4293\0\u42d8"+
    "\0\u431d\0\u4362\0\u3e88\0\u43a7\0\105\0\u43ec\0\u4431\0\u4476"+
    "\0\u44bb\0\105\0\u4500\0\u4545\0\u458a\0\u45cf\0\u4614\0\u4659"+
    "\0\u469e\0\u46e3\0\u4728\0\u476d\0\u47b2\0\u47f7\0\u43ec\0\u483c"+
    "\0\u4881\0\u48c6\0\105\0\u490b\0\u4950\0\105\0\105\0\u4995"+
    "\0\u49da\0\u4a1f\0\u4a64\0\u4aa9\0\u4aee\0\u47f7\0\u4b33\0\u4b78"+
    "\0\u4bbd\0\u4c02\0\105\0\105\0\u4c47\0\u4c8c\0\u4cd1\0\u4d16"+
    "\0\u4d5b\0\u4da0\0\u4de5\0\u4e2a\0\105\0\u4e6f\0\u4eb4\0\u4ef9"+
    "\0\105\0\105\0\u4f3e\0\105";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[340];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\2\1\3\1\5\1\6\1\7"+
    "\1\2\1\3\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\13\1\16\2\13\1\17\1\20\1\21\2\13\1\22"+
    "\1\13\1\23\1\24\1\13\1\25\1\26\1\27\1\13"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\2\13\1\50\3\13\1\51\1\52\1\13\1\53\1\54"+
    "\1\13\1\55\1\56\1\13\1\57\1\60\1\61\1\13"+
    "\106\0\1\62\2\0\1\62\1\0\1\63\1\7\1\0"+
    "\1\62\2\0\1\64\1\65\1\66\1\67\1\0\1\70"+
    "\2\0\1\17\1\71\1\72\1\73\1\0\1\74\1\0"+
    "\1\75\1\76\1\0\1\77\1\26\1\100\1\0\1\101"+
    "\1\102\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\103\1\104\1\46\1\105\2\0"+
    "\1\106\1\0\1\107\16\0\2\110\1\111\1\112\101\110"+
    "\3\113\1\114\1\113\1\111\77\113\1\0\1\63\2\0"+
    "\1\63\1\0\1\63\1\7\1\0\1\63\2\0\1\64"+
    "\1\65\1\66\1\67\1\0\1\70\2\0\1\17\1\71"+
    "\1\72\1\73\1\0\1\74\1\0\1\75\1\76\1\0"+
    "\1\77\1\26\1\100\1\0\1\101\1\102\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\103\1\104\1\46\1\105\2\0\1\106\1\0\1\107"+
    "\20\0\2\7\4\0\27\7\1\0\10\7\2\0\6\7"+
    "\2\0\23\7\12\0\1\10\1\115\10\13\1\0\11\13"+
    "\3\0\3\13\12\0\2\13\2\0\21\13\1\0\1\13"+
    "\12\0\1\13\1\0\1\13\1\116\6\13\1\0\11\13"+
    "\3\0\3\13\12\0\1\117\1\13\2\0\21\13\1\0"+
    "\1\13\12\0\1\13\1\0\10\13\1\0\11\13\3\0"+
    "\3\13\12\0\2\13\2\0\21\13\1\0\1\13\12\0"+
    "\1\13\1\0\1\13\1\120\6\13\1\0\11\13\3\0"+
    "\3\13\12\0\2\13\2\0\21\13\1\0\1\13\12\0"+
    "\1\13\1\0\1\13\1\121\6\13\1\0\11\13\3\0"+
    "\3\13\12\0\2\13\2\0\21\13\1\0\1\13\12\0"+
    "\1\13\1\0\1\13\1\122\6\13\1\0\11\13\3\0"+
    "\3\13\12\0\2\13\2\0\21\13\1\0\1\13\11\0"+
    "\1\17\105\0\1\13\1\0\10\13\1\0\1\13\1\123"+
    "\4\13\1\124\2\13\3\0\3\13\12\0\2\13\2\0"+
    "\21\13\1\0\1\13\12\0\1\13\1\0\2\13\1\125"+
    "\1\13\1\126\3\13\1\0\3\13\1\127\5\13\3\0"+
    "\3\13\12\0\2\13\2\0\21\13\1\0\1\13\12\0"+
    "\1\13\1\0\4\13\1\130\3\13\1\0\11\13\3\0"+
    "\3\13\12\0\2\13\2\0\21\13\1\0\1\13\12\0"+
    "\1\13\1\0\2\13\1\131\5\13\1\0\11\13\3\0"+
    "\3\13\12\0\1\132\1\13\2\0\21\13\1\0\1\13"+
    "\12\0\1\13\1\0\1\13\1\133\6\13\1\0\10\13"+
    "\1\134\3\0\3\13\12\0\2\13\2\0\21\13\1\0"+
    "\1\13\1\0\1\135\2\0\1\135\1\0\1\135\2\0"+
    "\1\135\25\0\1\136\46\0\1\137\2\0\1\137\1\0"+
    "\1\137\2\0\1\137\24\0\1\140\100\0\1\141\64\0"+
    "\1\13\1\0\2\13\1\142\5\13\1\0\11\13\3\0"+
    "\3\13\12\0\1\143\1\13\2\0\21\13\1\0\1\13"+
    "\12\0\1\13\1\0\2\13\1\144\1\13\1\145\3\13"+
    "\1\0\11\13\3\0\3\13\12\0\2\13\2\0\21\13"+
    "\1\0\1\13\1\0\1\32\2\0\1\32\1\0\1\32"+
    "\2\0\1\32\74\0\1\34\2\0\1\34\1\0\1\34"+
    "\2\0\1\34\74\0\1\36\2\0\1\36\1\0\1\36"+
    "\2\0\1\36\74\0\1\40\2\0\1\40\1\0\1\40"+
    "\2\0\1\40\74\0\1\41\2\0\1\41\1\0\1\41"+
    "\2\0\1\41\74\0\1\42\2\0\1\42\1\0\1\42"+
    "\2\0\1\42\74\0\1\43\2\0\1\43\1\0\1\43"+
    "\2\0\1\43\105\0\1\13\1\0\10\13\1\0\1\13"+
    "\1\146\7\13\3\0\3\13\12\0\2\13\2\0\21\13"+
    "\1\0\1\13\12\0\1\13\1\0\6\13\1\147\1\13"+
    "\1\0\11\13\3\0\3\13\12\0\2\13\2\0\21\13"+
    "\1\0\1\13\1\0\1\150\2\0\1\150\1\0\1\150"+
    "\2\0\1\150\24\0\1\151\47\0\1\152\2\0\1\152"+
    "\1\0\1\152\2\0\1\152\24\0\1\153\60\0\1\13"+
    "\1\0\2\13\1\154\5\13\1\0\11\13\3\0\3\13"+
    "\12\0\2\13\2\0\21\13\1\0\1\13\12\0\1\13"+
    "\1\0\10\13\1\0\11\13\3\0\3\13\12\0\1\155"+
    "\1\13\2\0\21\13\1\0\1\13\12\0\1\13\1\0"+
    "\2\13\1\156\5\13\1\0\11\13\3\0\3\13\12\0"+
    "\2\13\2\0\21\13\1\0\1\13\12\0\1\13\1\0"+
    "\4\13\1\157\3\13\1\0\11\13\3\0\3\13\12\0"+
    "\2\13\2\0\21\13\1\0\1\13\12\0\1\13\1\0"+
    "\10\13\1\0\2\13\1\160\6\13\3\0\1\161\2\13"+
    "\12\0\2\13\2\0\13\13\1\162\5\13\1\0\1\13"+
    "\12\0\1\13\1\0\2\13\1\163\5\13\1\0\11\13"+
    "\3\0\3\13\12\0\2\13\2\0\21\13\1\0\1\13"+
    "\12\0\1\13\1\0\1\13\1\164\6\13\1\0\11\13"+
    "\3\0\3\13\12\0\2\13\2\0\1\13\1\165\17\13"+
    "\1\0\1\13\12\0\1\13\1\0\7\13\1\166\1\0"+
    "\11\13\3\0\3\13\12\0\2\13\2\0\21\13\1\0"+
    "\1\13\12\0\1\13\1\0\2\13\1\167\5\13\1\0"+
    "\11\13\3\0\3\13\12\0\2\13\2\0\21\13\1\0"+
    "\1\13\1\0\1\62\2\0\1\62\1\0\1\63\1\7"+
    "\1\0\1\62\2\0\1\64\1\65\1\66\1\67\4\0"+
    "\1\17\1\71\1\72\1\73\1\0\1\74\1\0\1\75"+
    "\1\76\1\0\1\77\1\26\1\100\1\0\1\101\1\102"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\103\1\104\1\46\1\105\2\0\1\106"+
    "\1\0\1\107\17\0\1\63\2\0\1\63\1\0\1\63"+
    "\1\7\1\0\1\63\2\0\1\64\1\65\1\66\1\67"+
    "\4\0\1\17\1\71\1\72\1\73\1\0\1\74\1\0"+
    "\1\75\1\76\1\0\1\77\1\26\1\100\1\0\1\101"+
    "\1\102\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\103\1\104\1\46\1\105\2\0"+
    "\1\106\1\0\1\107\33\0\1\170\107\0\1\171\101\0"+
    "\1\172\12\0\1\173\71\0\1\174\154\0\1\175\45\0"+
    "\1\176\4\0\1\177\67\0\1\200\1\0\1\201\7\0"+
    "\1\202\104\0\1\203\104\0\1\204\72\0\1\205\123\0"+
    "\1\206\50\0\1\135\2\0\1\135\1\0\1\135\2\0"+
    "\1\135\12\0\1\207\12\0\1\136\46\0\1\210\2\0"+
    "\1\210\1\0\1\210\2\0\1\210\20\0\1\141\70\0"+
    "\1\211\104\0\1\212\114\0\1\213\100\0\1\214\100\0"+
    "\1\215\144\0\1\216\26\0\4\110\1\0\100\110\4\113"+
    "\1\0\100\113\12\0\1\115\104\0\1\13\1\0\2\13"+
    "\1\217\5\13\1\0\11\13\3\0\3\13\12\0\2\13"+
    "\2\0\21\13\1\0\1\13\12\0\1\13\1\0\1\13"+
    "\1\220\6\13\1\0\11\13\3\0\3\13\12\0\2\13"+
    "\2\0\21\13\1\0\1\13\1\0\1\172\2\0\1\172"+
    "\1\0\1\172\2\0\1\172\1\13\1\0\10\13\1\0"+
    "\11\13\3\0\3\13\12\0\2\13\2\0\21\13\1\0"+
    "\1\13\12\0\1\13\1\0\2\13\1\221\5\13\1\0"+
    "\11\13\3\0\3\13\12\0\2\13\2\0\21\13\1\0"+
    "\1\13\12\0\1\13\1\0\10\13\1\0\3\13\1\222"+
    "\5\13\3\0\3\13\12\0\2\13\2\0\21\13\1\0"+
    "\1\13\12\0\1\13\1\0\10\13\1\223\11\13\3\0"+
    "\3\13\12\0\2\13\2\0\21\13\1\0\1\13\12\0"+
    "\1\13\1\0\10\13\1\224\11\13\3\0\3\13\12\0"+
    "\2\13\2\0\21\13\1\0\1\13\12\0\1\13\1\0"+
    "\5\13\1\225\2\13\1\0\11\13\3\0\3\13\12\0"+
    "\2\13\2\0\21\13\1\0\1\13\12\0\1\13\1\0"+
    "\10\13\1\0\11\13\3\0\3\13\12\0\2\13\2\0"+
    "\1\226\20\13\1\0\1\13\12\0\1\13\1\0\10\13"+
    "\1\0\11\13\3\0\1\227\2\13\12\0\2\13\2\0"+
    "\21\13\1\0\1\13\12\0\1\13\1\0\5\13\1\230"+
    "\2\13\1\0\11\13\3\0\3\13\12\0\2\13\2\0"+
    "\21\13\1\0\1\13\12\0\1\13\1\0\1\13\1\231"+
    "\6\13\1\0\11\13\3\0\3\13\12\0\2\13\2\0"+
    "\21\13\1\0\1\13\12\0\1\13\1\0\10\13\1\0"+
    "\11\13\3\0\1\232\2\13\12\0\2\13\2\0\21\13"+
    "\1\0\1\13\12\0\1\13\1\0\10\13\1\0\3\13"+
    "\1\233\5\13\3\0\3\13\12\0\2\13\2\0\21\13"+
    "\1\0\1\13\12\0\1\13\1\0\4\13\1\234\3\13"+
    "\1\0\11\13\3\0\3\13\12\0\2\13\2\0\21\13"+
    "\1\0\1\13\1\0\1\135\2\0\1\135\1\0\1\135"+
    "\2\0\1\135\74\0\1\136\2\0\1\136\1\0\1\136"+
    "\2\0\1\136\74\0\1\137\2\0\1\137\1\0\1\137"+
    "\2\0\1\137\74\0\1\140\2\0\1\140\1\0\1\140"+
    "\2\0\1\140\74\0\1\141\2\0\1\141\1\0\1\141"+
    "\2\0\1\141\105\0\1\13\1\0\1\13\1\235\6\13"+
    "\1\0\11\13\3\0\3\13\12\0\2\13\2\0\21\13"+
    "\1\0\1\13\12\0\1\13\1\0\10\13\1\0\11\13"+
    "\3\0\1\236\2\13\12\0\2\13\2\0\21\13\1\0"+
    "\1\13\12\0\1\13\1\0\10\13\1\237\11\13\3\0"+
    "\3\13\12\0\2\13\2\0\21\13\1\0\1\13\12\0"+
    "\1\13\1\0\10\13\1\0\6\13\1\240\2\13\3\0"+
    "\3\13\12\0\2\13\2\0\21\13\1\0\1\13\12\0"+
    "\1\13\1\0\10\13\1\0\11\13\3\0\3\13\12\0"+
    "\1\13\1\241\2\0\21\13\1\0\1\13\12\0\1\13"+
    "\1\0\10\13\1\0\11\13\3\0\3\13\12\0\2\13"+
    "\2\0\1\13\1\242\17\13\1\0\1\13\1\0\1\150"+
    "\2\0\1\150\1\0\1\150\2\0\1\150\74\0\1\151"+
    "\2\0\1\151\1\0\1\151\2\0\1\151\74\0\1\152"+
    "\2\0\1\152\1\0\1\152\2\0\1\152\74\0\1\153"+
    "\2\0\1\153\1\0\1\153\2\0\1\153\105\0\1\13"+
    "\1\0\6\13\1\243\1\13\1\0\11\13\3\0\3\13"+
    "\12\0\2\13\2\0\21\13\1\0\1\13\12\0\1\13"+
    "\1\0\10\13\1\0\5\13\1\244\3\13\3\0\3\13"+
    "\12\0\2\13\2\0\21\13\1\0\1\13\12\0\1\13"+
    "\1\0\1\13\1\245\6\13\1\0\11\13\3\0\3\13"+
    "\12\0\2\13\2\0\21\13\1\0\1\13\12\0\1\13"+
    "\1\0\5\13\1\246\2\13\1\0\11\13\3\0\3\13"+
    "\12\0\2\13\2\0\21\13\1\0\1\13\12\0\1\13"+
    "\1\0\10\13\1\0\11\13\3\0\1\13\1\247\1\13"+
    "\12\0\2\13\2\0\21\13\1\0\1\250\12\0\1\13"+
    "\1\0\7\13\1\251\1\0\11\13\3\0\3\13\12\0"+
    "\2\13\2\0\21\13\1\0\1\13\12\0\1\13\1\0"+
    "\5\13\1\252\2\13\1\0\11\13\3\0\3\13\12\0"+
    "\2\13\2\0\21\13\1\0\1\13\12\0\1\13\1\0"+
    "\10\13\1\0\1\13\1\253\7\13\3\0\3\13\12\0"+
    "\2\13\2\0\21\13\1\0\1\13\12\0\1\13\1\0"+
    "\10\13\1\0\11\13\3\0\3\13\12\0\2\13\2\0"+
    "\16\13\1\254\2\13\1\0\1\13\12\0\1\13\1\0"+
    "\5\13\1\255\2\13\1\0\11\13\3\0\3\13\12\0"+
    "\2\13\2\0\21\13\1\0\1\13\12\0\1\13\1\0"+
    "\10\13\1\0\11\13\3\0\3\13\12\0\1\256\1\13"+
    "\2\0\21\13\1\0\1\13\12\0\1\13\1\0\10\13"+
    "\1\0\11\13\3\0\3\13\12\0\1\13\1\257\2\0"+
    "\21\13\1\0\1\13\16\0\1\260\111\0\1\261\62\0"+
    "\1\172\2\0\1\172\1\0\1\172\2\0\1\172\114\0"+
    "\1\262\101\0\1\263\105\0\1\264\66\0\1\265\2\0"+
    "\1\265\1\0\1\265\2\0\1\265\12\0\1\223\2\0"+
    "\1\266\101\0\1\224\101\0\1\267\145\0\1\270\63\0"+
    "\1\271\64\0\1\272\111\0\1\273\73\0\1\274\107\0"+
    "\1\275\65\0\1\276\2\0\1\276\1\0\1\276\2\0"+
    "\1\276\74\0\1\210\2\0\1\210\1\0\1\210\2\0"+
    "\1\210\110\0\1\277\113\0\1\237\137\0\1\300\110\0"+
    "\1\301\43\0\1\302\123\0\1\303\55\0\1\13\1\0"+
    "\3\13\1\304\4\13\1\0\11\13\3\0\3\13\12\0"+
    "\2\13\2\0\21\13\1\0\1\13\12\0\1\13\1\0"+
    "\10\13\1\0\11\13\3\0\3\13\12\0\1\305\1\13"+
    "\2\0\21\13\1\0\1\13\12\0\1\13\1\0\3\13"+
    "\1\306\4\13\1\0\11\13\3\0\3\13\12\0\2\13"+
    "\2\0\21\13\1\0\1\13\12\0\1\13\1\0\4\13"+
    "\1\307\3\13\1\0\11\13\3\0\3\13\12\0\2\13"+
    "\2\0\21\13\1\0\1\13\1\0\1\223\2\0\1\223"+
    "\1\0\1\223\2\0\1\223\74\0\1\224\2\0\1\224"+
    "\1\0\1\224\2\0\1\224\74\0\1\267\2\0\1\267"+
    "\1\0\1\267\2\0\1\267\1\13\1\0\10\13\1\0"+
    "\11\13\3\0\3\13\12\0\2\13\2\0\21\13\1\0"+
    "\1\13\12\0\1\13\1\0\10\13\1\0\11\13\3\0"+
    "\1\310\2\13\12\0\2\13\2\0\21\13\1\0\1\13"+
    "\12\0\1\13\1\0\10\13\1\0\3\13\1\311\5\13"+
    "\3\0\3\13\12\0\2\13\2\0\21\13\1\0\1\13"+
    "\12\0\1\13\1\0\10\13\1\0\5\13\1\312\3\13"+
    "\3\0\3\13\12\0\2\13\2\0\21\13\1\0\1\13"+
    "\12\0\1\13\1\0\7\13\1\313\1\0\11\13\3\0"+
    "\3\13\12\0\2\13\2\0\21\13\1\0\1\13\12\0"+
    "\1\13\1\0\4\13\1\314\3\13\1\0\11\13\3\0"+
    "\3\13\12\0\2\13\2\0\21\13\1\0\1\13\12\0"+
    "\1\13\1\0\10\13\1\0\1\13\1\315\7\13\3\0"+
    "\3\13\12\0\2\13\2\0\21\13\1\0\1\13\12\0"+
    "\1\13\1\0\10\13\1\316\11\13\3\0\3\13\12\0"+
    "\2\13\2\0\21\13\1\0\1\13\12\0\1\13\1\0"+
    "\7\13\1\317\1\0\11\13\3\0\3\13\12\0\2\13"+
    "\2\0\21\13\1\0\1\13\1\0\1\320\2\0\1\320"+
    "\1\0\1\320\2\0\1\320\105\0\1\13\1\0\10\13"+
    "\1\0\11\13\3\0\3\13\12\0\1\321\1\13\2\0"+
    "\21\13\1\0\1\13\1\0\1\300\2\0\1\300\1\0"+
    "\1\300\2\0\1\300\1\13\1\0\10\13\1\0\11\13"+
    "\3\0\3\13\12\0\2\13\2\0\21\13\1\0\1\13"+
    "\12\0\1\13\1\0\5\13\1\322\2\13\1\0\11\13"+
    "\3\0\3\13\12\0\2\13\2\0\21\13\1\0\1\13"+
    "\12\0\1\13\1\0\10\13\1\0\1\13\1\323\7\13"+
    "\3\0\3\13\12\0\2\13\2\0\21\13\1\0\1\13"+
    "\12\0\1\13\1\0\4\13\1\324\3\13\1\0\11\13"+
    "\3\0\3\13\12\0\2\13\2\0\21\13\1\0\1\13"+
    "\12\0\1\13\1\0\10\13\1\0\11\13\3\0\3\13"+
    "\12\0\2\13\2\0\10\13\1\325\10\13\1\0\1\13"+
    "\12\0\1\13\1\0\10\13\1\0\10\13\1\326\3\0"+
    "\3\13\12\0\2\13\2\0\21\13\1\0\1\13\12\0"+
    "\1\13\1\0\4\13\1\327\3\13\1\0\11\13\3\0"+
    "\3\13\12\0\2\13\2\0\21\13\1\0\1\13\12\0"+
    "\1\13\1\0\4\13\1\330\3\13\1\0\11\13\3\0"+
    "\3\13\12\0\2\13\2\0\21\13\1\0\1\13\12\0"+
    "\1\13\1\0\5\13\1\331\2\13\1\0\11\13\3\0"+
    "\3\13\12\0\2\13\2\0\21\13\1\0\1\13\12\0"+
    "\1\13\1\0\10\13\1\0\3\13\1\332\5\13\3\0"+
    "\3\13\12\0\2\13\2\0\21\13\1\0\1\13\12\0"+
    "\1\13\1\0\6\13\1\333\1\13\1\0\11\13\3\0"+
    "\3\13\12\0\2\13\2\0\21\13\1\0\1\13\12\0"+
    "\1\13\1\0\10\13\1\0\11\13\3\0\3\13\12\0"+
    "\2\13\2\0\16\13\1\334\2\13\1\0\1\13\12\0"+
    "\1\13\1\0\10\13\1\0\11\13\3\0\3\13\12\0"+
    "\2\13\2\0\3\13\1\335\15\13\1\0\1\13\17\0"+
    "\1\336\103\0\1\337\105\0\1\340\104\0\1\341\105\0"+
    "\1\342\65\0\1\265\2\0\1\265\1\0\1\265\2\0"+
    "\1\265\123\0\1\343\55\0\1\267\2\0\1\267\1\0"+
    "\1\267\2\0\1\267\134\0\1\344\44\0\1\345\2\0"+
    "\1\345\1\0\1\345\2\0\1\345\114\0\1\346\115\0"+
    "\1\347\100\0\1\350\102\0\1\316\61\0\1\300\2\0"+
    "\1\300\1\0\1\300\2\0\1\300\114\0\1\351\111\0"+
    "\1\352\106\0\1\353\66\0\1\13\1\0\4\13\1\354"+
    "\3\13\1\0\11\13\3\0\3\13\12\0\2\13\2\0"+
    "\21\13\1\0\1\13\12\0\1\13\1\0\10\13\1\0"+
    "\5\13\1\355\3\13\3\0\3\13\12\0\2\13\2\0"+
    "\21\13\1\0\1\13\12\0\1\13\1\0\4\13\1\356"+
    "\3\13\1\0\11\13\3\0\3\13\12\0\2\13\2\0"+
    "\21\13\1\0\1\13\11\0\1\344\1\13\1\0\10\13"+
    "\1\0\11\13\3\0\3\13\12\0\2\13\2\0\21\13"+
    "\1\0\1\13\12\0\1\13\1\0\1\13\1\357\6\13"+
    "\1\0\11\13\3\0\3\13\12\0\2\13\2\0\21\13"+
    "\1\0\1\13\12\0\1\13\1\0\10\13\1\0\11\13"+
    "\3\0\3\13\12\0\1\360\1\13\2\0\21\13\1\0"+
    "\1\13\12\0\1\13\1\0\4\13\1\361\3\13\1\0"+
    "\11\13\3\0\3\13\12\0\2\13\2\0\21\13\1\0"+
    "\1\13\12\0\1\13\1\0\10\13\1\362\11\13\3\0"+
    "\3\13\12\0\2\13\2\0\21\13\1\0\1\13\1\0"+
    "\1\316\2\0\1\316\1\0\1\316\2\0\1\316\105\0"+
    "\1\13\1\0\4\13\1\363\3\13\1\0\11\13\3\0"+
    "\3\13\12\0\2\13\2\0\21\13\1\0\1\13\12\0"+
    "\1\13\1\0\10\13\1\0\3\13\1\364\5\13\3\0"+
    "\3\13\12\0\2\13\2\0\21\13\1\0\1\13\12\0"+
    "\1\13\1\0\7\13\1\365\1\366\11\13\3\0\3\13"+
    "\12\0\2\13\2\0\21\13\1\0\1\13\12\0\1\13"+
    "\1\0\10\13\1\0\6\13\1\367\2\13\3\0\3\13"+
    "\12\0\2\13\2\0\21\13\1\0\1\13\12\0\1\13"+
    "\1\0\2\13\1\370\5\13\1\0\11\13\3\0\3\13"+
    "\12\0\2\13\2\0\21\13\1\0\1\13\12\0\1\13"+
    "\1\0\10\13\1\371\11\13\3\0\3\13\12\0\2\13"+
    "\2\0\21\13\1\0\1\13\12\0\1\13\1\0\10\13"+
    "\1\0\1\13\1\372\7\13\3\0\3\13\12\0\2\13"+
    "\2\0\21\13\1\0\1\13\12\0\1\13\1\0\1\13"+
    "\1\373\6\13\1\0\11\13\3\0\3\13\12\0\2\13"+
    "\2\0\21\13\1\0\1\13\12\0\1\13\1\0\10\13"+
    "\1\0\5\13\1\374\3\13\3\0\3\13\12\0\2\13"+
    "\2\0\21\13\1\0\1\13\12\0\1\13\1\0\2\13"+
    "\1\375\5\13\1\0\11\13\3\0\3\13\12\0\2\13"+
    "\2\0\21\13\1\0\1\13\12\0\1\13\1\0\4\13"+
    "\1\376\3\13\1\0\11\13\3\0\3\13\12\0\2\13"+
    "\2\0\21\13\1\0\1\13\12\0\1\13\1\0\10\13"+
    "\1\377\11\13\3\0\3\13\12\0\2\13\2\0\21\13"+
    "\1\0\1\13\20\0\1\u0100\114\0\1\u0101\104\0\1\u0102"+
    "\74\0\1\u0103\110\0\1\u0104\101\0\1\u0105\74\0\1\344"+
    "\115\0\1\u0106\140\0\1\u0107\52\0\1\362\100\0\1\u0108"+
    "\76\0\1\13\1\0\1\13\1\u0109\6\13\1\0\11\13"+
    "\3\0\3\13\12\0\2\13\2\0\21\13\1\0\1\13"+
    "\12\0\1\13\1\0\4\13\1\u010a\3\13\1\0\11\13"+
    "\3\0\3\13\12\0\2\13\2\0\21\13\1\0\1\13"+
    "\12\0\1\13\1\0\1\13\1\u010b\6\13\1\0\11\13"+
    "\3\0\3\13\12\0\2\13\2\0\21\13\1\0\1\13"+
    "\12\0\1\13\1\0\10\13\1\0\1\13\1\u010c\7\13"+
    "\3\0\3\13\12\0\2\13\2\0\21\13\1\0\1\13"+
    "\12\0\1\13\1\0\5\13\1\u010d\2\13\1\0\11\13"+
    "\3\0\3\13\12\0\2\13\2\0\21\13\1\0\1\13"+
    "\12\0\1\13\1\0\10\13\1\0\11\13\3\0\1\u010e"+
    "\2\13\12\0\2\13\2\0\21\13\1\0\1\13\12\0"+
    "\1\13\1\0\3\13\1\u010f\4\13\1\0\11\13\3\0"+
    "\3\13\12\0\2\13\2\0\21\13\1\0\1\13\12\0"+
    "\1\13\1\0\10\13\1\0\11\13\3\0\1\u0110\2\13"+
    "\12\0\2\13\2\0\21\13\1\0\1\13\12\0\1\13"+
    "\1\0\10\13\1\0\11\13\3\0\3\13\12\0\1\13"+
    "\1\u0111\2\0\21\13\1\0\1\13\12\0\1\13\1\0"+
    "\10\13\1\0\11\13\3\0\3\13\12\0\1\13\1\u0112"+
    "\2\0\21\13\1\0\1\13\12\0\1\13\1\0\10\13"+
    "\1\0\11\13\3\0\3\13\12\0\1\u0113\1\13\2\0"+
    "\21\13\1\0\1\13\12\0\1\13\1\0\4\13\1\u0114"+
    "\3\13\1\0\11\13\3\0\3\13\12\0\2\13\2\0"+
    "\21\13\1\0\1\13\12\0\1\13\1\0\10\13\1\0"+
    "\1\13\1\u0115\7\13\3\0\3\13\12\0\2\13\2\0"+
    "\21\13\1\0\1\13\12\0\1\13\1\0\10\13\1\u0116"+
    "\11\13\3\0\3\13\12\0\2\13\2\0\21\13\1\0"+
    "\1\13\15\0\1\u0117\104\0\1\u0118\110\0\1\u0119\100\0"+
    "\1\u011a\70\0\1\u0104\2\0\1\u0104\1\0\1\u0104\2\0"+
    "\1\u0104\74\0\1\u011b\2\0\1\u011b\1\0\1\u011b\2\0"+
    "\1\u011b\125\0\1\u011c\73\0\1\u011d\107\0\1\u011e\72\0"+
    "\1\13\1\0\5\13\1\u011f\2\13\1\0\11\13\3\0"+
    "\3\13\12\0\2\13\2\0\21\13\1\0\1\13\12\0"+
    "\1\13\1\0\5\13\1\u0120\2\13\1\0\11\13\3\0"+
    "\3\13\12\0\2\13\2\0\21\13\1\0\1\13\12\0"+
    "\1\13\1\0\5\13\1\u0121\2\13\1\0\11\13\3\0"+
    "\3\13\12\0\2\13\2\0\21\13\1\0\1\13\12\0"+
    "\1\13\1\0\10\13\1\u0122\11\13\3\0\3\13\12\0"+
    "\2\13\2\0\21\13\1\0\1\13\12\0\1\13\1\0"+
    "\5\13\1\u0123\2\13\1\0\11\13\3\0\3\13\12\0"+
    "\2\13\2\0\21\13\1\0\1\13\12\0\1\13\1\0"+
    "\10\13\1\0\11\13\3\0\3\13\12\0\1\u0124\1\13"+
    "\2\0\21\13\1\0\1\13\12\0\1\13\1\0\2\13"+
    "\1\u0125\5\13\1\0\11\13\3\0\3\13\12\0\2\13"+
    "\2\0\21\13\1\0\1\13\12\0\1\13\1\0\7\13"+
    "\1\u0126\1\0\11\13\3\0\3\13\12\0\2\13\2\0"+
    "\21\13\1\0\1\13\12\0\1\13\1\0\7\13\1\u0127"+
    "\1\0\11\13\3\0\3\13\12\0\2\13\2\0\21\13"+
    "\1\0\1\13\12\0\1\13\1\0\10\13\1\0\11\13"+
    "\3\0\3\13\12\0\2\13\2\0\1\13\1\u0128\17\13"+
    "\1\0\1\13\12\0\1\13\1\0\10\13\1\0\1\13"+
    "\1\u0129\7\13\3\0\3\13\12\0\2\13\2\0\21\13"+
    "\1\0\1\13\21\0\1\u012a\146\0\1\u012b\44\0\1\u012c"+
    "\102\0\1\u012d\103\0\1\u012e\65\0\1\u012f\2\0\1\u012f"+
    "\1\0\1\u012f\2\0\1\u012f\105\0\1\13\1\0\6\13"+
    "\1\u0130\1\13\1\0\11\13\3\0\3\13\12\0\2\13"+
    "\2\0\21\13\1\0\1\13\12\0\1\13\1\0\4\13"+
    "\1\u0131\3\13\1\0\11\13\3\0\3\13\12\0\2\13"+
    "\2\0\21\13\1\0\1\13\12\0\1\13\1\0\6\13"+
    "\1\u0132\1\13\1\0\11\13\3\0\3\13\12\0\2\13"+
    "\2\0\21\13\1\0\1\13\12\0\1\13\1\0\10\13"+
    "\1\u0133\11\13\3\0\3\13\12\0\2\13\2\0\21\13"+
    "\1\0\1\13\12\0\1\13\1\0\10\13\1\0\11\13"+
    "\3\0\3\13\12\0\2\13\2\0\1\13\1\u0134\17\13"+
    "\1\0\1\13\12\0\1\13\1\0\10\13\1\0\11\13"+
    "\3\0\3\13\12\0\2\13\2\0\1\u0135\20\13\1\0"+
    "\1\13\12\0\1\13\1\0\10\13\1\u0136\11\13\3\0"+
    "\3\13\12\0\2\13\2\0\21\13\1\0\1\13\12\0"+
    "\1\13\1\0\10\13\1\u0137\11\13\3\0\3\13\12\0"+
    "\2\13\2\0\21\13\1\0\1\13\12\0\1\13\1\0"+
    "\5\13\1\u0138\2\13\1\0\11\13\3\0\3\13\12\0"+
    "\2\13\2\0\21\13\1\0\1\13\12\0\1\13\1\0"+
    "\5\13\1\u0139\2\13\1\0\11\13\3\0\3\13\12\0"+
    "\2\13\2\0\21\13\1\0\1\13\22\0\1\u013a\102\0"+
    "\1\u013b\110\0\1\u013c\102\0\1\u013d\63\0\1\u013e\2\0"+
    "\1\u013e\1\0\1\u013e\2\0\1\u013e\105\0\1\13\1\0"+
    "\4\13\1\u013f\3\13\1\0\11\13\3\0\3\13\12\0"+
    "\2\13\2\0\21\13\1\0\1\13\12\0\1\13\1\0"+
    "\1\13\1\u0140\6\13\1\0\11\13\3\0\3\13\12\0"+
    "\2\13\2\0\21\13\1\0\1\13\12\0\1\13\1\0"+
    "\4\13\1\u0141\3\13\1\0\11\13\3\0\3\13\12\0"+
    "\2\13\2\0\21\13\1\0\1\13\12\0\1\13\1\0"+
    "\4\13\1\u0142\3\13\1\0\11\13\3\0\3\13\12\0"+
    "\2\13\2\0\21\13\1\0\1\13\12\0\1\13\1\0"+
    "\10\13\1\u0143\11\13\3\0\3\13\12\0\2\13\2\0"+
    "\21\13\1\0\1\13\12\0\1\13\1\0\10\13\1\u0144"+
    "\11\13\3\0\3\13\12\0\2\13\2\0\21\13\1\0"+
    "\1\13\12\0\1\13\1\0\7\13\1\u0145\1\0\11\13"+
    "\3\0\3\13\12\0\2\13\2\0\21\13\1\0\1\13"+
    "\20\0\1\u0146\107\0\1\u0147\62\0\1\u013c\2\0\1\u013c"+
    "\1\0\1\u013c\2\0\1\u013c\113\0\1\u0148\76\0\1\13"+
    "\1\0\7\13\1\u0149\1\0\11\13\3\0\3\13\12\0"+
    "\2\13\2\0\21\13\1\0\1\13\12\0\1\13\1\0"+
    "\7\13\1\u014a\1\0\11\13\3\0\3\13\12\0\2\13"+
    "\2\0\21\13\1\0\1\13\12\0\1\13\1\0\7\13"+
    "\1\u014b\1\0\11\13\3\0\3\13\12\0\2\13\2\0"+
    "\21\13\1\0\1\13\12\0\1\13\1\0\7\13\1\u014c"+
    "\1\0\11\13\3\0\3\13\12\0\2\13\2\0\21\13"+
    "\1\0\1\13\12\0\1\13\1\0\10\13\1\u014d\11\13"+
    "\3\0\3\13\12\0\2\13\2\0\21\13\1\0\1\13"+
    "\23\0\1\u014e\105\0\1\u014f\103\0\1\u0150\73\0\1\13"+
    "\1\0\10\13\1\u0151\11\13\3\0\3\13\12\0\2\13"+
    "\2\0\21\13\1\0\1\13\12\0\1\13\1\0\10\13"+
    "\1\u0152\11\13\3\0\3\13\12\0\2\13\2\0\21\13"+
    "\1\0\1\13\12\0\1\13\1\0\10\13\1\u0153\11\13"+
    "\3\0\3\13\12\0\2\13\2\0\21\13\1\0\1\13"+
    "\12\0\1\13\1\0\10\13\1\u0154\11\13\3\0\3\13"+
    "\12\0\2\13\2\0\21\13\1\0\1\13\24\0\1\u0151"+
    "\61\0\1\u014f\2\0\1\u014f\1\0\1\u014f\2\0\1\u014f"+
    "\117\0\1\u0153\61\0\1\u0153\2\0\1\u0153\1\0\1\u0153"+
    "\2\0\1\u0153\73\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[20355];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\6\1\1\11\21\1\1\11\1\1\1\11"+
    "\1\1\1\11\21\1\1\11\1\1\14\0\1\1\5\0"+
    "\1\1\3\0\1\11\3\0\53\1\2\0\1\1\15\0"+
    "\1\1\6\0\20\1\1\0\20\1\5\0\1\1\1\0"+
    "\1\1\1\11\5\0\1\1\1\0\1\1\3\0\14\1"+
    "\1\11\15\1\6\0\2\1\3\0\2\11\1\0\6\1"+
    "\1\11\3\1\1\11\2\1\1\11\5\1\1\11\4\0"+
    "\1\1\4\0\15\1\1\11\4\0\1\1\1\0\1\11"+
    "\1\0\3\1\1\11\7\1\5\0\4\1\1\11\2\1"+
    "\2\11\2\1\2\0\1\1\1\0\5\1\2\11\1\1"+
    "\3\0\4\1\1\11\1\0\1\1\1\0\2\11\1\1"+
    "\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[340];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  public _MuranoLexer() {
    this((java.io.Reader)null);
  }


  public _MuranoLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _MuranoLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1334) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 42: 
          { return NULL_TOKEN;
          }
        case 75: break;
        case 41: 
          { return MPL_BOOL_TRUE;
          }
        case 76: break;
        case 47: 
          { return FN_JOIN_TOKEN;
          }
        case 77: break;
        case 57: 
          { return ACTION_TOKEN;
          }
        case 78: break;
        case 27: 
          { return OP_GE;
          }
        case 79: break;
        case 33: 
          { return IF_TOKEN;
          }
        case 80: break;
        case 72: 
          { return PARAMETERS_TOKEN;
          }
        case 81: break;
        case 31: 
          { return INDENT;
          }
        case 82: break;
        case 59: 
          { return USAGE_INOUT_TOKEN;
          }
        case 83: break;
        case 50: 
          { return THEN_TOKEN;
          }
        case 84: break;
        case 4: 
          { return NUMBER;
          }
        case 85: break;
        case 6: 
          { return ID;
          }
        case 86: break;
        case 51: 
          { return BOOL_TOKEN_F;
          }
        case 87: break;
        case 8: 
          { return OP_EQ;
          }
        case 88: break;
        case 48: 
          { return USAGE_OUT_TOKEN;
          }
        case 89: break;
        case 64: 
          { return EXTENDS_TOKEN;
          }
        case 90: break;
        case 23: 
          { return OP_N;
          }
        case 91: break;
        case 61: 
          { return HVALUE_TOKEN;
          }
        case 92: break;
        case 10: 
          { return LPAREN_TOKEN;
          }
        case 93: break;
        case 35: 
          { return FN_NEW_TOKEN;
          }
        case 94: break;
        case 56: 
          { return FN_FORMAT_TOKEN;
          }
        case 95: break;
        case 66: 
          { return USAGE_RUNTIME_TOKEN;
          }
        case 96: break;
        case 1: 
          { return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 97: break;
        case 17: 
          { return OP_MULT;
          }
        case 98: break;
        case 60: 
          { return RETURN_TOKEN;
          }
        case 99: break;
        case 28: 
          { return OP_MINUS;
          }
        case 100: break;
        case 5: 
          { return DOT_TOKEN;
          }
        case 101: break;
        case 44: 
          { return FOR_TOKEN;
          }
        case 102: break;
        case 34: 
          { return OP_NOT;
          }
        case 103: break;
        case 16: 
          { return OP_PLUS;
          }
        case 104: break;
        case 70: 
          { return HRESOURCES_TOKEN;
          }
        case 105: break;
        case 54: 
          { return BODY_TOKEN;
          }
        case 106: break;
        case 46: 
          { return FN_DICT_TOKEN;
          }
        case 107: break;
        case 65: 
          { return HOUTPUTS_TOKEN;
          }
        case 108: break;
        case 62: 
          { return DEFAULT_TOKEN;
          }
        case 109: break;
        case 58: 
          { return USAGE_TOKEN;
          }
        case 110: break;
        case 14: 
          { return LSQBR_TOKEN;
          }
        case 111: break;
        case 39: 
          { return USAGE_IN_TOKEN;
          }
        case 112: break;
        case 67: 
          { return WORKFLOW_TOKEN;
          }
        case 113: break;
        case 73: 
          { return HPROPERTIES_TOKEN;
          }
        case 114: break;
        case 20: 
          { return OP_LS;
          }
        case 115: break;
        case 63: 
          { return METHODS_TOKEN;
          }
        case 116: break;
        case 55: 
          { return HTYPE_TOKEN;
          }
        case 117: break;
        case 13: 
          { return RBRAKETS_TOKEN;
          }
        case 118: break;
        case 26: 
          { return MAP_TOKEN;
          }
        case 119: break;
        case 12: 
          { return LBRAKETS_TOKEN;
          }
        case 120: break;
        case 3: 
          { return COMMENT_TOKEN;
          }
        case 121: break;
        case 36: 
          { return OP_AND;
          }
        case 122: break;
        case 52: 
          { return NAME_TOKEN;
          }
        case 123: break;
        case 25: 
          { return OP_OR;
          }
        case 124: break;
        case 53: 
          { return ELSE_TOKEN;
          }
        case 125: break;
        case 40: 
          { return DEFAULTNS_TOKEN;
          }
        case 126: break;
        case 11: 
          { return RPAREN_TOKEN;
          }
        case 127: break;
        case 68: 
          { return CONTRACT_TOKEN;
          }
        case 128: break;
        case 74: 
          { return NAMESPACE_TOKEN;
          }
        case 129: break;
        case 7: 
          { return ASSIGN_TOKEN;
          }
        case 130: break;
        case 21: 
          { return OP_NEG;
          }
        case 131: break;
        case 37: 
          { return EOF;
          }
        case 132: break;
        case 30: 
          { return OP_NE;
          }
        case 133: break;
        case 24: 
          { return STRING;
          }
        case 134: break;
        case 32: 
          { return IN_TOKEN;
          }
        case 135: break;
        case 38: 
          { return EOL;
          }
        case 136: break;
        case 71: 
          { return PROPERTIES_TOKEN;
          }
        case 137: break;
        case 22: 
          { return DOLLAR_TOKEN;
          }
        case 138: break;
        case 19: 
          { return COMMA_TOKEN;
          }
        case 139: break;
        case 2: 
          { return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 140: break;
        case 43: 
          { return BOOL_TOKEN_T;
          }
        case 141: break;
        case 29: 
          { return OP_LE;
          }
        case 142: break;
        case 69: 
          { return ARGUMENTS_TOKEN;
          }
        case 143: break;
        case 9: 
          { return OP_GR;
          }
        case 144: break;
        case 15: 
          { return RSQBR_TOKEN;
          }
        case 145: break;
        case 45: 
          { return DO_TOKEN;
          }
        case 146: break;
        case 18: 
          { return OP_DIV;
          }
        case 147: break;
        case 49: 
          { return MPL_BOOL_FALSE;
          }
        case 148: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
