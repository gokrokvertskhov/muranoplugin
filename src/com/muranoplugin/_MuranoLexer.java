/* The following code was generated by JFlex 1.4.3 on 9/10/14 1:47 PM */

package com.muranoplugin;
import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import static com.muranoplugin.psi.MuranoTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 9/10/14 1:47 PM from the specification file
 * <tt>/Users/gokrokve/IdeaProjects/MuranoCode/src/com/muranoplugin/_MuranoLexer.flex</tt>
 */
public class _MuranoLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\11\1\2\1\6\1\1\1\1\22\0\1\11\1\57\1\5"+
    "\1\7\1\10\2\0\1\3\1\42\1\43\1\51\1\50\1\53\1\40"+
    "\1\13\1\52\12\12\1\24\1\0\1\56\1\36\1\37\2\0\1\75"+
    "\1\101\1\74\1\77\1\72\1\102\2\65\1\25\3\65\1\71\1\66"+
    "\1\27\1\14\1\65\1\31\1\65\1\34\1\100\1\65\1\67\3\65"+
    "\1\46\1\4\1\47\1\0\1\64\1\0\1\54\1\65\1\61\1\55"+
    "\1\20\1\33\1\76\1\35\1\22\1\65\1\70\1\41\1\32\1\26"+
    "\1\16\1\17\1\65\1\15\1\23\1\21\1\30\1\63\1\60\1\73"+
    "\1\62\1\65\1\44\1\0\1\45\54\0\1\65\12\0\1\65\4\0"+
    "\1\65\5\0\27\65\1\0\37\65\1\0\u013f\65\31\0\162\65\4\0"+
    "\14\65\16\0\5\65\11\0\1\65\213\0\1\65\13\0\1\65\1\0"+
    "\3\65\1\0\1\65\1\0\24\65\1\0\54\65\1\0\46\65\1\0"+
    "\5\65\4\0\202\65\10\0\105\65\1\0\46\65\2\0\2\65\6\0"+
    "\20\65\41\0\46\65\2\0\1\65\7\0\47\65\110\0\33\65\5\0"+
    "\3\65\56\0\32\65\5\0\13\65\43\0\2\65\1\0\143\65\1\0"+
    "\1\65\17\0\2\65\7\0\2\65\12\0\3\65\2\0\1\65\20\0"+
    "\1\65\1\0\36\65\35\0\3\65\60\0\46\65\13\0\1\65\u0152\0"+
    "\66\65\3\0\1\65\22\0\1\65\7\0\12\65\43\0\10\65\2\0"+
    "\2\65\2\0\26\65\1\0\7\65\1\0\1\65\3\0\4\65\3\0"+
    "\1\65\36\0\2\65\1\0\3\65\16\0\2\65\23\0\6\65\4\0"+
    "\2\65\2\0\26\65\1\0\7\65\1\0\2\65\1\0\2\65\1\0"+
    "\2\65\37\0\4\65\1\0\1\65\23\0\3\65\20\0\11\65\1\0"+
    "\3\65\1\0\26\65\1\0\7\65\1\0\2\65\1\0\5\65\3\0"+
    "\1\65\22\0\1\65\17\0\2\65\43\0\10\65\2\0\2\65\2\0"+
    "\26\65\1\0\7\65\1\0\2\65\1\0\5\65\3\0\1\65\36\0"+
    "\2\65\1\0\3\65\17\0\1\65\21\0\1\65\1\0\6\65\3\0"+
    "\3\65\1\0\4\65\3\0\2\65\1\0\1\65\1\0\2\65\3\0"+
    "\2\65\3\0\3\65\3\0\10\65\1\0\3\65\113\0\10\65\1\0"+
    "\3\65\1\0\27\65\1\0\12\65\1\0\5\65\46\0\2\65\43\0"+
    "\10\65\1\0\3\65\1\0\27\65\1\0\12\65\1\0\5\65\3\0"+
    "\1\65\40\0\1\65\1\0\2\65\43\0\10\65\1\0\3\65\1\0"+
    "\27\65\1\0\20\65\46\0\2\65\43\0\22\65\3\0\30\65\1\0"+
    "\11\65\1\0\1\65\2\0\7\65\72\0\60\65\1\0\2\65\14\0"+
    "\7\65\72\0\2\65\1\0\1\65\2\0\2\65\1\0\1\65\2\0"+
    "\1\65\6\0\4\65\1\0\7\65\1\0\3\65\1\0\1\65\1\0"+
    "\1\65\2\0\2\65\1\0\4\65\1\0\2\65\11\0\1\65\2\0"+
    "\5\65\1\0\1\65\25\0\2\65\42\0\1\65\77\0\10\65\1\0"+
    "\42\65\35\0\4\65\164\0\42\65\1\0\5\65\1\0\2\65\45\0"+
    "\6\65\112\0\46\65\12\0\51\65\7\0\132\65\5\0\104\65\5\0"+
    "\122\65\6\0\7\65\1\0\77\65\1\0\1\65\1\0\4\65\2\0"+
    "\7\65\1\0\1\65\1\0\4\65\2\0\47\65\1\0\1\65\1\0"+
    "\4\65\2\0\37\65\1\0\1\65\1\0\4\65\2\0\7\65\1\0"+
    "\1\65\1\0\4\65\2\0\7\65\1\0\7\65\1\0\27\65\1\0"+
    "\37\65\1\0\1\65\1\0\4\65\2\0\7\65\1\0\47\65\1\0"+
    "\23\65\105\0\125\65\14\0\u026c\65\2\0\10\65\12\0\32\65\5\0"+
    "\113\65\25\0\15\65\1\0\4\65\16\0\22\65\16\0\22\65\16\0"+
    "\15\65\1\0\3\65\17\0\64\65\43\0\1\65\4\0\1\65\103\0"+
    "\130\65\10\0\51\65\127\0\35\65\63\0\36\65\2\0\5\65\u038b\0"+
    "\154\65\224\0\234\65\4\0\132\65\6\0\26\65\2\0\6\65\2\0"+
    "\46\65\2\0\6\65\2\0\10\65\1\0\1\65\1\0\1\65\1\0"+
    "\1\65\1\0\37\65\2\0\65\65\1\0\7\65\1\0\1\65\3\0"+
    "\3\65\1\0\7\65\3\0\4\65\2\0\6\65\4\0\15\65\5\0"+
    "\3\65\1\0\7\65\164\0\1\65\15\0\1\65\202\0\1\65\4\0"+
    "\1\65\2\0\12\65\1\0\1\65\3\0\5\65\6\0\1\65\1\0"+
    "\1\65\1\0\1\65\1\0\4\65\1\0\3\65\1\0\7\65\3\0"+
    "\3\65\5\0\5\65\u0ebb\0\2\65\52\0\5\65\5\0\2\65\4\0"+
    "\126\65\6\0\3\65\1\0\132\65\1\0\4\65\5\0\50\65\4\0"+
    "\136\65\21\0\30\65\70\0\20\65\u0200\0\u19b6\65\112\0\u51a6\65\132\0"+
    "\u048d\65\u0773\0\u2ba4\65\u215c\0\u012e\65\2\0\73\65\225\0\7\65\14\0"+
    "\5\65\5\0\1\65\1\0\12\65\1\0\15\65\1\0\5\65\1\0"+
    "\1\65\1\0\2\65\1\0\2\65\1\0\154\65\41\0\u016b\65\22\0"+
    "\100\65\2\0\66\65\50\0\14\65\164\0\5\65\1\0\207\65\44\0"+
    "\32\65\6\0\32\65\13\0\131\65\3\0\6\65\2\0\6\65\2\0"+
    "\6\65\2\0\3\65\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\3\2\1\4\1\5\1\6\1\7"+
    "\5\1\1\10\5\1\1\11\1\12\1\2\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\2\1\1\25\1\26\12\1\1\3\14\0\1\11\3\0"+
    "\1\27\2\0\1\30\3\0\1\6\2\1\1\31\13\1"+
    "\1\11\1\32\1\12\1\33\1\34\2\1\1\25\1\35"+
    "\1\27\1\36\14\1\2\0\1\31\15\0\1\37\3\0"+
    "\4\1\1\40\1\41\1\42\6\1\1\43\4\1\1\44"+
    "\10\1\5\0\1\45\1\0\1\41\1\42\5\0\1\46"+
    "\1\43\2\0\3\1\1\47\1\50\3\1\1\51\1\1"+
    "\1\52\13\1\6\0\1\50\1\53\3\0\1\52\1\0"+
    "\5\1\1\54\1\55\1\1\1\56\2\1\1\57\5\1"+
    "\1\60\1\61\4\0\1\62\4\0\4\1\1\63\7\1"+
    "\1\64\4\0\1\65\1\0\1\63\1\0\3\1\1\66"+
    "\7\1\5\0\1\67\5\1\1\70\1\71\2\1\1\72"+
    "\2\0\1\73\1\0\1\74\4\1\1\75\1\76\1\1"+
    "\3\0\4\1\1\77\1\0\1\100\1\0\1\101\1\102"+
    "\1\103\1\104";

  private static int [] zzUnpackAction() {
    int [] result = new int[313];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\103\0\206\0\311\0\u010c\0\u014f\0\u0192\0\103"+
    "\0\u01d5\0\103\0\u0218\0\u025b\0\u029e\0\u02e1\0\u0324\0\u0367"+
    "\0\u03aa\0\u03ed\0\u0430\0\u0473\0\u04b6\0\u04f9\0\u053c\0\u057f"+
    "\0\u05c2\0\103\0\u0605\0\103\0\u0648\0\103\0\u068b\0\u06ce"+
    "\0\u0711\0\u0754\0\u0797\0\u07da\0\u081d\0\u0860\0\u08a3\0\u08e6"+
    "\0\u0929\0\u096c\0\u09af\0\u09f2\0\u0a35\0\u0a78\0\u0abb\0\u0afe"+
    "\0\u0b41\0\u0b84\0\u0bc7\0\u0c0a\0\u0c4d\0\u0c90\0\u0cd3\0\u0d16"+
    "\0\u0d59\0\u0d9c\0\u0ddf\0\u0e22\0\u0e65\0\u0ea8\0\u0eeb\0\u0f2e"+
    "\0\u0f71\0\u0860\0\u0fb4\0\311\0\103\0\u0ff7\0\u010c\0\u103a"+
    "\0\u107d\0\u10c0\0\u1103\0\u1146\0\u1189\0\u11cc\0\u120f\0\u1252"+
    "\0\u1295\0\u12d8\0\u131b\0\u135e\0\u13a1\0\u13e4\0\u1427\0\u146a"+
    "\0\u14ad\0\u14f0\0\u1533\0\u1576\0\u15b9\0\u15fc\0\u163f\0\u1682"+
    "\0\u16c5\0\u1708\0\u174b\0\u178e\0\u17d1\0\u1814\0\u1857\0\u189a"+
    "\0\u18dd\0\u1920\0\u1963\0\u19a6\0\u19e9\0\u1a2c\0\u1a6f\0\u1ab2"+
    "\0\u1af5\0\u1b38\0\u1b7b\0\u1bbe\0\u1c01\0\u1c44\0\u1c87\0\u1cca"+
    "\0\u1d0d\0\u1d50\0\u1d93\0\u1dd6\0\u1e19\0\u1e5c\0\u1e9f\0\u1ee2"+
    "\0\u1f25\0\u1f68\0\u1fab\0\u1fee\0\u2031\0\u2074\0\u20b7\0\u20fa"+
    "\0\u025b\0\u213d\0\u2180\0\u21c3\0\u2206\0\u2249\0\u228c\0\u22cf"+
    "\0\u2312\0\u2355\0\u2398\0\u23db\0\u025b\0\u241e\0\u2461\0\u24a4"+
    "\0\u24e7\0\u252a\0\u256d\0\u25b0\0\u25f3\0\u2636\0\u2679\0\u26bc"+
    "\0\u26ff\0\u2742\0\u2785\0\u27c8\0\u280b\0\103\0\u284e\0\u2891"+
    "\0\u28d4\0\u2917\0\u295a\0\u1e5c\0\u299d\0\u29e0\0\u2a23\0\u2a66"+
    "\0\u2aa9\0\u2aec\0\u025b\0\u2b2f\0\u2b72\0\u2bb5\0\u2bf8\0\u025b"+
    "\0\u2c3b\0\u025b\0\u2c7e\0\u2cc1\0\u2d04\0\u2d47\0\u2d8a\0\u2dcd"+
    "\0\u2e10\0\u2e53\0\u2e96\0\u2ed9\0\u2f1c\0\u2f5f\0\u2fa2\0\u2fe5"+
    "\0\u3028\0\u306b\0\u30ae\0\u30f1\0\u2891\0\u3134\0\u3177\0\u31ba"+
    "\0\103\0\u31fd\0\u3240\0\u3283\0\u32c6\0\u3309\0\u334c\0\u025b"+
    "\0\103\0\u338f\0\103\0\u33d2\0\u3415\0\103\0\u3458\0\u349b"+
    "\0\u34de\0\u3521\0\u3564\0\103\0\u025b\0\u35a7\0\u35ea\0\u362d"+
    "\0\u3670\0\u36b3\0\u36f6\0\u3739\0\u377c\0\u37bf\0\u3802\0\u3845"+
    "\0\u3888\0\u38cb\0\u025b\0\u390e\0\u3951\0\u3994\0\u39d7\0\u3a1a"+
    "\0\u3a5d\0\u3aa0\0\103\0\u3ae3\0\u3b26\0\u3b69\0\u3bac\0\u36f6"+
    "\0\u3bef\0\103\0\u3c32\0\u3c75\0\u3cb8\0\u3cfb\0\103\0\u3d3e"+
    "\0\u3d81\0\u3dc4\0\u3e07\0\u3e4a\0\u3e8d\0\u3ed0\0\u3f13\0\u3f56"+
    "\0\u3f99\0\u3fdc\0\u401f\0\u3c32\0\u4062\0\u40a5\0\u40e8\0\u412b"+
    "\0\u416e\0\103\0\103\0\u41b1\0\u41f4\0\103\0\u4237\0\u427a"+
    "\0\u42bd\0\u4300\0\u401f\0\u4343\0\u4386\0\u43c9\0\u440c\0\103"+
    "\0\103\0\u444f\0\u4492\0\u44d5\0\u4518\0\u455b\0\u459e\0\u45e1"+
    "\0\u4624\0\103\0\u4667\0\u46aa\0\u46ed\0\103\0\103\0\u4730"+
    "\0\103";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[313];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\2\1\5\1\6\1\7\1\10"+
    "\1\3\1\11\1\12\1\13\1\14\1\15\1\16\1\14"+
    "\1\17\2\14\1\20\1\21\1\22\2\14\1\23\1\14"+
    "\1\24\1\25\1\14\1\26\1\27\1\30\1\14\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\6\14\1\47\1\50"+
    "\1\14\1\51\1\52\1\14\1\53\1\54\1\14\1\55"+
    "\1\56\1\57\1\60\104\0\2\61\3\0\1\62\1\7"+
    "\1\0\1\61\2\0\1\63\1\64\1\65\1\66\1\0"+
    "\1\67\2\0\1\20\1\70\1\71\1\72\1\0\1\73"+
    "\1\0\1\74\1\75\1\0\1\76\1\27\1\77\1\0"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\100\1\101\1\45\1\102\3\0\1\103"+
    "\17\0\3\104\1\105\1\106\76\104\4\107\1\110\1\105"+
    "\75\107\1\0\2\62\3\0\1\62\1\7\1\0\1\62"+
    "\2\0\1\63\1\64\1\65\1\66\1\0\1\67\2\0"+
    "\1\20\1\70\1\71\1\72\1\0\1\73\1\0\1\74"+
    "\1\75\1\0\1\76\1\27\1\77\1\0\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\100\1\101\1\45\1\102\3\0\1\103\27\0\2\7"+
    "\1\0\23\7\3\0\3\7\7\0\3\7\2\0\4\7"+
    "\1\0\16\7\12\0\1\11\1\111\103\0\1\14\1\112"+
    "\6\14\1\0\11\14\3\0\1\14\12\0\1\113\1\14"+
    "\2\0\23\14\14\0\10\14\1\0\11\14\3\0\1\14"+
    "\12\0\2\14\2\0\23\14\14\0\1\14\1\114\6\14"+
    "\1\0\11\14\3\0\1\14\12\0\2\14\2\0\23\14"+
    "\14\0\1\14\1\115\6\14\1\0\11\14\3\0\1\14"+
    "\12\0\2\14\2\0\23\14\14\0\1\14\1\116\6\14"+
    "\1\0\11\14\3\0\1\14\12\0\2\14\2\0\23\14"+
    "\11\0\1\20\105\0\10\14\1\0\6\14\1\117\2\14"+
    "\3\0\1\14\12\0\2\14\2\0\23\14\14\0\2\14"+
    "\1\120\1\14\1\121\3\14\1\0\3\14\1\122\5\14"+
    "\3\0\1\14\12\0\2\14\2\0\23\14\14\0\4\14"+
    "\1\123\3\14\1\0\11\14\3\0\1\14\12\0\2\14"+
    "\2\0\23\14\14\0\2\14\1\124\5\14\1\0\11\14"+
    "\3\0\1\14\12\0\1\125\1\14\2\0\23\14\14\0"+
    "\1\14\1\126\6\14\1\0\10\14\1\127\3\0\1\14"+
    "\12\0\2\14\2\0\23\14\1\0\2\130\3\0\1\130"+
    "\2\0\1\130\25\0\1\131\44\0\2\132\3\0\1\132"+
    "\2\0\1\132\24\0\1\133\76\0\1\134\51\0\2\31"+
    "\3\0\1\31\2\0\1\31\72\0\2\33\3\0\1\33"+
    "\2\0\1\33\72\0\2\35\3\0\1\35\2\0\1\35"+
    "\72\0\2\37\3\0\1\37\2\0\1\37\72\0\2\40"+
    "\3\0\1\40\2\0\1\40\72\0\2\41\3\0\1\41"+
    "\2\0\1\41\72\0\2\42\3\0\1\42\2\0\1\42"+
    "\105\0\10\14\1\0\1\14\1\135\7\14\3\0\1\14"+
    "\12\0\2\14\2\0\23\14\14\0\6\14\1\136\1\14"+
    "\1\0\11\14\3\0\1\14\12\0\2\14\2\0\23\14"+
    "\1\0\2\137\3\0\1\137\2\0\1\137\24\0\1\140"+
    "\45\0\2\141\3\0\1\141\2\0\1\141\24\0\1\142"+
    "\60\0\10\14\1\0\11\14\3\0\1\14\12\0\1\143"+
    "\1\14\2\0\23\14\14\0\2\14\1\144\5\14\1\0"+
    "\11\14\3\0\1\14\12\0\2\14\2\0\23\14\14\0"+
    "\4\14\1\145\3\14\1\0\11\14\3\0\1\14\12\0"+
    "\2\14\2\0\23\14\14\0\10\14\1\0\2\14\1\146"+
    "\6\14\3\0\1\147\12\0\2\14\2\0\13\14\1\150"+
    "\7\14\14\0\2\14\1\151\5\14\1\0\11\14\3\0"+
    "\1\14\12\0\2\14\2\0\23\14\14\0\1\14\1\152"+
    "\6\14\1\0\11\14\3\0\1\14\12\0\2\14\2\0"+
    "\23\14\14\0\4\14\1\153\3\14\1\0\11\14\3\0"+
    "\1\14\12\0\2\14\2\0\23\14\14\0\7\14\1\154"+
    "\1\0\11\14\3\0\1\14\12\0\2\14\2\0\23\14"+
    "\14\0\2\14\1\155\5\14\1\0\11\14\3\0\1\14"+
    "\12\0\2\14\2\0\23\14\14\0\10\14\1\0\11\14"+
    "\3\0\1\14\12\0\1\156\1\14\2\0\23\14\1\0"+
    "\2\61\3\0\1\62\1\7\1\0\1\61\2\0\1\63"+
    "\1\64\1\65\1\66\4\0\1\20\1\70\1\71\1\72"+
    "\1\0\1\73\1\0\1\74\1\75\1\0\1\76\1\27"+
    "\1\77\1\0\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\100\1\101\1\45\1\102"+
    "\3\0\1\103\20\0\2\62\3\0\1\62\1\7\1\0"+
    "\1\62\2\0\1\63\1\64\1\65\1\66\4\0\1\20"+
    "\1\70\1\71\1\72\1\0\1\73\1\0\1\74\1\75"+
    "\1\0\1\76\1\27\1\77\1\0\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\100"+
    "\1\101\1\45\1\102\3\0\1\103\34\0\1\157\105\0"+
    "\1\160\77\0\1\161\12\0\1\162\67\0\1\163\147\0"+
    "\1\164\46\0\1\165\4\0\1\166\65\0\1\167\1\0"+
    "\1\170\7\0\1\171\102\0\1\172\102\0\1\173\70\0"+
    "\1\174\121\0\1\175\46\0\2\130\3\0\1\130\2\0"+
    "\1\130\12\0\1\176\12\0\1\131\44\0\2\177\3\0"+
    "\1\177\2\0\1\177\20\0\1\134\76\0\1\200\76\0"+
    "\1\201\134\0\1\202\26\0\2\104\1\0\100\104\2\107"+
    "\1\0\100\107\12\0\1\111\104\0\2\14\1\203\5\14"+
    "\1\0\11\14\3\0\1\14\12\0\2\14\2\0\23\14"+
    "\14\0\1\14\1\204\6\14\1\0\11\14\3\0\1\14"+
    "\12\0\2\14\2\0\23\14\1\0\2\161\3\0\1\161"+
    "\2\0\1\161\2\0\10\14\1\0\11\14\3\0\1\14"+
    "\12\0\2\14\2\0\23\14\14\0\2\14\1\205\5\14"+
    "\1\0\11\14\3\0\1\14\12\0\2\14\2\0\23\14"+
    "\14\0\10\14\1\0\3\14\1\206\5\14\3\0\1\14"+
    "\12\0\2\14\2\0\23\14\14\0\10\14\1\207\11\14"+
    "\3\0\1\14\12\0\2\14\2\0\23\14\14\0\5\14"+
    "\1\210\2\14\1\0\11\14\3\0\1\14\12\0\2\14"+
    "\2\0\23\14\14\0\10\14\1\0\11\14\3\0\1\14"+
    "\12\0\2\14\2\0\1\211\22\14\14\0\10\14\1\0"+
    "\11\14\3\0\1\212\12\0\2\14\2\0\23\14\14\0"+
    "\5\14\1\213\2\14\1\0\11\14\3\0\1\14\12\0"+
    "\2\14\2\0\23\14\14\0\1\14\1\214\6\14\1\0"+
    "\11\14\3\0\1\14\12\0\2\14\2\0\23\14\14\0"+
    "\10\14\1\0\11\14\3\0\1\215\12\0\2\14\2\0"+
    "\23\14\14\0\10\14\1\0\3\14\1\216\5\14\3\0"+
    "\1\14\12\0\2\14\2\0\23\14\14\0\4\14\1\217"+
    "\3\14\1\0\11\14\3\0\1\14\12\0\2\14\2\0"+
    "\23\14\1\0\2\130\3\0\1\130\2\0\1\130\72\0"+
    "\2\131\3\0\1\131\2\0\1\131\72\0\2\132\3\0"+
    "\1\132\2\0\1\132\72\0\2\133\3\0\1\133\2\0"+
    "\1\133\72\0\2\134\3\0\1\134\2\0\1\134\105\0"+
    "\10\14\1\0\11\14\3\0\1\14\12\0\1\14\1\220"+
    "\2\0\23\14\14\0\10\14\1\0\11\14\3\0\1\14"+
    "\12\0\2\14\2\0\1\14\1\221\21\14\1\0\2\137"+
    "\3\0\1\137\2\0\1\137\72\0\2\140\3\0\1\140"+
    "\2\0\1\140\72\0\2\141\3\0\1\141\2\0\1\141"+
    "\72\0\2\142\3\0\1\142\2\0\1\142\105\0\10\14"+
    "\1\0\5\14\1\222\3\14\3\0\1\14\12\0\2\14"+
    "\2\0\23\14\14\0\1\14\1\223\6\14\1\0\11\14"+
    "\3\0\1\14\12\0\2\14\2\0\23\14\14\0\5\14"+
    "\1\224\2\14\1\0\11\14\3\0\1\14\12\0\2\14"+
    "\2\0\23\14\14\0\10\14\1\0\11\14\3\0\1\14"+
    "\12\0\2\14\2\0\22\14\1\225\14\0\7\14\1\226"+
    "\1\0\11\14\3\0\1\14\12\0\2\14\2\0\23\14"+
    "\14\0\5\14\1\227\2\14\1\0\11\14\3\0\1\14"+
    "\12\0\2\14\2\0\23\14\14\0\10\14\1\0\1\14"+
    "\1\230\7\14\3\0\1\14\12\0\2\14\2\0\23\14"+
    "\14\0\10\14\1\0\11\14\3\0\1\14\12\0\2\14"+
    "\2\0\16\14\1\231\4\14\14\0\10\14\1\0\6\14"+
    "\1\232\2\14\3\0\1\14\12\0\2\14\2\0\23\14"+
    "\14\0\10\14\1\0\11\14\3\0\1\14\12\0\1\233"+
    "\1\14\2\0\23\14\14\0\10\14\1\0\11\14\3\0"+
    "\1\14\12\0\1\14\1\234\2\0\23\14\14\0\10\14"+
    "\1\0\11\14\3\0\1\235\12\0\2\14\2\0\23\14"+
    "\16\0\1\236\107\0\1\237\60\0\2\161\3\0\1\161"+
    "\2\0\1\161\112\0\1\240\77\0\1\241\103\0\1\242"+
    "\64\0\2\243\3\0\1\243\2\0\1\243\15\0\1\244"+
    "\77\0\1\207\77\0\1\245\141\0\1\246\63\0\1\247"+
    "\62\0\1\250\107\0\1\251\71\0\1\252\105\0\1\253"+
    "\63\0\2\254\3\0\1\254\2\0\1\254\72\0\2\177"+
    "\3\0\1\177\2\0\1\177\146\0\1\255\106\0\1\256"+
    "\62\0\1\257\55\0\3\14\1\260\4\14\1\0\11\14"+
    "\3\0\1\14\12\0\2\14\2\0\23\14\14\0\10\14"+
    "\1\0\11\14\3\0\1\14\12\0\1\261\1\14\2\0"+
    "\23\14\14\0\3\14\1\262\4\14\1\0\11\14\3\0"+
    "\1\14\12\0\2\14\2\0\23\14\14\0\4\14\1\263"+
    "\3\14\1\0\11\14\3\0\1\14\12\0\2\14\2\0"+
    "\23\14\1\0\2\207\3\0\1\207\2\0\1\207\72\0"+
    "\2\245\3\0\1\245\2\0\1\245\2\0\10\14\1\0"+
    "\11\14\3\0\1\14\12\0\2\14\2\0\23\14\14\0"+
    "\10\14\1\0\11\14\3\0\1\264\12\0\2\14\2\0"+
    "\23\14\14\0\10\14\1\0\3\14\1\265\5\14\3\0"+
    "\1\14\12\0\2\14\2\0\23\14\14\0\10\14\1\0"+
    "\5\14\1\266\3\14\3\0\1\14\12\0\2\14\2\0"+
    "\23\14\14\0\7\14\1\267\1\0\11\14\3\0\1\14"+
    "\12\0\2\14\2\0\23\14\14\0\4\14\1\270\3\14"+
    "\1\0\11\14\3\0\1\14\12\0\2\14\2\0\23\14"+
    "\14\0\10\14\1\0\1\14\1\271\7\14\3\0\1\14"+
    "\12\0\2\14\2\0\23\14\1\0\2\255\3\0\1\255"+
    "\2\0\1\255\2\0\10\14\1\0\11\14\3\0\1\14"+
    "\12\0\2\14\2\0\23\14\14\0\5\14\1\272\2\14"+
    "\1\0\11\14\3\0\1\14\12\0\2\14\2\0\23\14"+
    "\14\0\4\14\1\273\3\14\1\0\11\14\3\0\1\14"+
    "\12\0\2\14\2\0\23\14\14\0\10\14\1\0\11\14"+
    "\3\0\1\14\12\0\2\14\2\0\10\14\1\274\12\14"+
    "\14\0\10\14\1\0\10\14\1\275\3\0\1\14\12\0"+
    "\2\14\2\0\23\14\14\0\4\14\1\276\3\14\1\0"+
    "\11\14\3\0\1\14\12\0\2\14\2\0\23\14\14\0"+
    "\4\14\1\277\3\14\1\0\11\14\3\0\1\14\12\0"+
    "\2\14\2\0\23\14\14\0\5\14\1\300\2\14\1\0"+
    "\11\14\3\0\1\14\12\0\2\14\2\0\23\14\14\0"+
    "\10\14\1\0\3\14\1\301\5\14\3\0\1\14\12\0"+
    "\2\14\2\0\23\14\14\0\10\14\1\0\11\14\3\0"+
    "\1\14\12\0\1\302\1\14\2\0\23\14\14\0\10\14"+
    "\1\0\11\14\3\0\1\14\12\0\2\14\2\0\16\14"+
    "\1\303\4\14\14\0\10\14\1\0\11\14\3\0\1\14"+
    "\12\0\2\14\2\0\2\14\1\304\20\14\14\0\7\14"+
    "\1\305\1\0\11\14\3\0\1\14\12\0\2\14\2\0"+
    "\23\14\17\0\1\306\101\0\1\307\103\0\1\310\102\0"+
    "\1\311\103\0\1\312\63\0\2\243\3\0\1\243\2\0"+
    "\1\243\121\0\1\313\53\0\2\245\3\0\1\245\2\0"+
    "\1\245\132\0\1\314\42\0\2\315\3\0\1\315\2\0"+
    "\1\315\112\0\1\316\113\0\1\317\76\0\1\320\55\0"+
    "\2\255\3\0\1\255\2\0\1\255\112\0\1\321\111\0"+
    "\1\322\66\0\4\14\1\323\3\14\1\0\11\14\3\0"+
    "\1\14\12\0\2\14\2\0\23\14\14\0\10\14\1\0"+
    "\5\14\1\324\3\14\3\0\1\14\12\0\2\14\2\0"+
    "\23\14\14\0\4\14\1\325\3\14\1\0\11\14\3\0"+
    "\1\14\12\0\2\14\2\0\23\14\11\0\1\314\2\0"+
    "\10\14\1\0\11\14\3\0\1\14\12\0\2\14\2\0"+
    "\23\14\14\0\1\14\1\326\6\14\1\0\11\14\3\0"+
    "\1\14\12\0\2\14\2\0\23\14\14\0\10\14\1\0"+
    "\11\14\3\0\1\14\12\0\1\327\1\14\2\0\23\14"+
    "\14\0\4\14\1\330\3\14\1\0\11\14\3\0\1\14"+
    "\12\0\2\14\2\0\23\14\14\0\10\14\1\331\11\14"+
    "\3\0\1\14\12\0\2\14\2\0\23\14\14\0\7\14"+
    "\1\332\1\333\11\14\3\0\1\14\12\0\2\14\2\0"+
    "\23\14\14\0\10\14\1\0\6\14\1\334\2\14\3\0"+
    "\1\14\12\0\2\14\2\0\23\14\14\0\2\14\1\335"+
    "\5\14\1\0\11\14\3\0\1\14\12\0\2\14\2\0"+
    "\23\14\14\0\10\14\1\336\11\14\3\0\1\14\12\0"+
    "\2\14\2\0\23\14\14\0\10\14\1\0\1\14\1\337"+
    "\7\14\3\0\1\14\12\0\2\14\2\0\23\14\14\0"+
    "\1\14\1\340\6\14\1\0\11\14\3\0\1\14\12\0"+
    "\2\14\2\0\23\14\14\0\10\14\1\0\5\14\1\341"+
    "\3\14\3\0\1\14\12\0\2\14\2\0\23\14\14\0"+
    "\10\14\1\0\3\14\1\342\5\14\3\0\1\14\12\0"+
    "\2\14\2\0\23\14\14\0\4\14\1\343\3\14\1\0"+
    "\11\14\3\0\1\14\12\0\2\14\2\0\23\14\14\0"+
    "\10\14\1\344\11\14\3\0\1\14\12\0\2\14\2\0"+
    "\23\14\14\0\4\14\1\345\3\14\1\0\11\14\3\0"+
    "\1\14\12\0\2\14\2\0\23\14\20\0\1\346\112\0"+
    "\1\347\102\0\1\350\72\0\1\351\106\0\1\352\77\0"+
    "\1\353\72\0\1\314\113\0\1\354\134\0\1\355\52\0"+
    "\1\331\76\0\1\356\76\0\1\14\1\357\6\14\1\0"+
    "\11\14\3\0\1\14\12\0\2\14\2\0\23\14\14\0"+
    "\4\14\1\360\3\14\1\0\11\14\3\0\1\14\12\0"+
    "\2\14\2\0\23\14\14\0\1\14\1\361\6\14\1\0"+
    "\11\14\3\0\1\14\12\0\2\14\2\0\23\14\14\0"+
    "\10\14\1\0\1\14\1\362\7\14\3\0\1\14\12\0"+
    "\2\14\2\0\23\14\14\0\5\14\1\363\2\14\1\0"+
    "\11\14\3\0\1\14\12\0\2\14\2\0\23\14\14\0"+
    "\3\14\1\364\4\14\1\0\11\14\3\0\1\14\12\0"+
    "\2\14\2\0\23\14\14\0\10\14\1\0\11\14\3\0"+
    "\1\365\12\0\2\14\2\0\23\14\14\0\10\14\1\0"+
    "\11\14\3\0\1\14\12\0\1\14\1\366\2\0\23\14"+
    "\14\0\10\14\1\0\11\14\3\0\1\14\12\0\1\14"+
    "\1\367\2\0\23\14\14\0\10\14\1\0\11\14\3\0"+
    "\1\14\12\0\1\370\1\14\2\0\23\14\14\0\4\14"+
    "\1\371\3\14\1\0\11\14\3\0\1\14\12\0\2\14"+
    "\2\0\23\14\14\0\10\14\1\0\11\14\3\0\1\372"+
    "\12\0\2\14\2\0\23\14\14\0\10\14\1\373\11\14"+
    "\3\0\1\14\12\0\2\14\2\0\23\14\15\0\1\374"+
    "\102\0\1\375\106\0\1\376\76\0\1\377\66\0\2\352"+
    "\3\0\1\352\2\0\1\352\72\0\2\u0100\3\0\1\u0100"+
    "\2\0\1\u0100\123\0\1\u0101\71\0\1\u0102\105\0\1\u0103"+
    "\72\0\5\14\1\u0104\2\14\1\0\11\14\3\0\1\14"+
    "\12\0\2\14\2\0\23\14\14\0\5\14\1\u0105\2\14"+
    "\1\0\11\14\3\0\1\14\12\0\2\14\2\0\23\14"+
    "\14\0\5\14\1\u0106\2\14\1\0\11\14\3\0\1\14"+
    "\12\0\2\14\2\0\23\14\14\0\10\14\1\u0107\11\14"+
    "\3\0\1\14\12\0\2\14\2\0\23\14\14\0\10\14"+
    "\1\0\11\14\3\0\1\14\12\0\1\u0108\1\14\2\0"+
    "\23\14\14\0\2\14\1\u0109\5\14\1\0\11\14\3\0"+
    "\1\14\12\0\2\14\2\0\23\14\14\0\7\14\1\u010a"+
    "\1\0\11\14\3\0\1\14\12\0\2\14\2\0\23\14"+
    "\14\0\7\14\1\u010b\1\0\11\14\3\0\1\14\12\0"+
    "\2\14\2\0\23\14\14\0\10\14\1\0\11\14\3\0"+
    "\1\14\12\0\2\14\2\0\1\14\1\u010c\21\14\14\0"+
    "\10\14\1\0\1\14\1\u010d\7\14\3\0\1\14\12\0"+
    "\2\14\2\0\23\14\14\0\5\14\1\u010e\2\14\1\0"+
    "\11\14\3\0\1\14\12\0\2\14\2\0\23\14\21\0"+
    "\1\u010f\142\0\1\u0110\44\0\1\u0111\100\0\1\u0112\101\0"+
    "\1\u0113\63\0\2\u0114\3\0\1\u0114\2\0\1\u0114\105\0"+
    "\6\14\1\u0115\1\14\1\0\11\14\3\0\1\14\12\0"+
    "\2\14\2\0\23\14\14\0\4\14\1\u0116\3\14\1\0"+
    "\11\14\3\0\1\14\12\0\2\14\2\0\23\14\14\0"+
    "\6\14\1\u0117\1\14\1\0\11\14\3\0\1\14\12\0"+
    "\2\14\2\0\23\14\14\0\10\14\1\0\11\14\3\0"+
    "\1\14\12\0\2\14\2\0\1\14\1\u0118\21\14\14\0"+
    "\10\14\1\0\11\14\3\0\1\14\12\0\2\14\2\0"+
    "\1\u0119\22\14\14\0\10\14\1\u011a\11\14\3\0\1\14"+
    "\12\0\2\14\2\0\23\14\14\0\10\14\1\u011b\11\14"+
    "\3\0\1\14\12\0\2\14\2\0\23\14\14\0\5\14"+
    "\1\u011c\2\14\1\0\11\14\3\0\1\14\12\0\2\14"+
    "\2\0\23\14\14\0\5\14\1\u011d\2\14\1\0\11\14"+
    "\3\0\1\14\12\0\2\14\2\0\23\14\14\0\10\14"+
    "\1\u011e\11\14\3\0\1\14\12\0\2\14\2\0\23\14"+
    "\22\0\1\u011f\100\0\1\u0120\106\0\1\u0121\100\0\1\u0122"+
    "\61\0\2\u0123\3\0\1\u0123\2\0\1\u0123\105\0\4\14"+
    "\1\u0124\3\14\1\0\11\14\3\0\1\14\12\0\2\14"+
    "\2\0\23\14\14\0\1\14\1\u0125\6\14\1\0\11\14"+
    "\3\0\1\14\12\0\2\14\2\0\23\14\14\0\4\14"+
    "\1\u0126\3\14\1\0\11\14\3\0\1\14\12\0\2\14"+
    "\2\0\23\14\14\0\4\14\1\u0127\3\14\1\0\11\14"+
    "\3\0\1\14\12\0\2\14\2\0\23\14\14\0\10\14"+
    "\1\u0128\11\14\3\0\1\14\12\0\2\14\2\0\23\14"+
    "\14\0\10\14\1\u0129\11\14\3\0\1\14\12\0\2\14"+
    "\2\0\23\14\14\0\7\14\1\u012a\1\0\11\14\3\0"+
    "\1\14\12\0\2\14\2\0\23\14\20\0\1\u012b\105\0"+
    "\1\u012c\60\0\2\u0121\3\0\1\u0121\2\0\1\u0121\111\0"+
    "\1\u012d\76\0\7\14\1\u012e\1\0\11\14\3\0\1\14"+
    "\12\0\2\14\2\0\23\14\14\0\7\14\1\u012f\1\0"+
    "\11\14\3\0\1\14\12\0\2\14\2\0\23\14\14\0"+
    "\7\14\1\u0130\1\0\11\14\3\0\1\14\12\0\2\14"+
    "\2\0\23\14\14\0\7\14\1\u0131\1\0\11\14\3\0"+
    "\1\14\12\0\2\14\2\0\23\14\14\0\10\14\1\u0132"+
    "\11\14\3\0\1\14\12\0\2\14\2\0\23\14\23\0"+
    "\1\u0133\103\0\1\u0134\101\0\1\u0135\73\0\10\14\1\u0136"+
    "\11\14\3\0\1\14\12\0\2\14\2\0\23\14\14\0"+
    "\10\14\1\u0137\11\14\3\0\1\14\12\0\2\14\2\0"+
    "\23\14\14\0\10\14\1\u0138\11\14\3\0\1\14\12\0"+
    "\2\14\2\0\23\14\14\0\10\14\1\u0139\11\14\3\0"+
    "\1\14\12\0\2\14\2\0\23\14\24\0\1\u0136\57\0"+
    "\2\u0134\3\0\1\u0134\2\0\1\u0134\115\0\1\u0138\57\0"+
    "\2\u0138\3\0\1\u0138\2\0\1\u0138\71\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[18291];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\5\1\1\11\1\1\1\11\17\1\1\11"+
    "\1\1\1\11\1\1\1\11\23\1\14\0\1\1\3\0"+
    "\1\1\2\0\1\11\3\0\46\1\2\0\1\1\15\0"+
    "\1\1\3\0\33\1\5\0\1\1\1\0\1\1\1\11"+
    "\5\0\2\1\2\0\26\1\6\0\2\1\3\0\1\11"+
    "\1\0\6\1\1\11\1\1\1\11\2\1\1\11\5\1"+
    "\1\11\1\1\4\0\1\1\4\0\14\1\1\11\4\0"+
    "\1\1\1\0\1\11\1\0\3\1\1\11\7\1\5\0"+
    "\6\1\2\11\2\1\1\11\2\0\1\1\1\0\5\1"+
    "\2\11\1\1\3\0\4\1\1\11\1\0\1\1\1\0"+
    "\2\11\1\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[313];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  public _MuranoLexer() {
    this((java.io.Reader)null);
  }


  public _MuranoLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _MuranoLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1268) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 4: 
          { return COMMENT_TOKEN;
          }
        case 69: break;
        case 59: 
          { return HOUTPUTS_TOKEN;
          }
        case 70: break;
        case 27: 
          { return OP_GE;
          }
        case 71: break;
        case 55: 
          { return HVALUE_TOKEN;
          }
        case 72: break;
        case 37: 
          { return USAGE_IN_TOKEN;
          }
        case 73: break;
        case 51: 
          { return FN_FORMAT_TOKEN;
          }
        case 74: break;
        case 13: 
          { return LBRAKETS_TOKEN;
          }
        case 75: break;
        case 52: 
          { return USAGE_TOKEN;
          }
        case 76: break;
        case 17: 
          { return OP_PLUS;
          }
        case 77: break;
        case 58: 
          { return DEFAULT_TOKEN;
          }
        case 78: break;
        case 61: 
          { return WORKFLOW_TOKEN;
          }
        case 79: break;
        case 63: 
          { return ARGUMENTS_TOKEN;
          }
        case 80: break;
        case 30: 
          { return OP_NE;
          }
        case 81: break;
        case 6: 
          { return NUMBER;
          }
        case 82: break;
        case 23: 
          { return OP_N;
          }
        case 83: break;
        case 22: 
          { return OP_NEG;
          }
        case 84: break;
        case 32: 
          { return IF_TOKEN;
          }
        case 85: break;
        case 36: 
          { return EOF;
          }
        case 86: break;
        case 66: 
          { return PARAMETERS_TOKEN;
          }
        case 87: break;
        case 9: 
          { return OP_EQ;
          }
        case 88: break;
        case 7: 
          { return DOT_TOKEN;
          }
        case 89: break;
        case 18: 
          { return OP_MULT;
          }
        case 90: break;
        case 50: 
          { return HTYPE_TOKEN;
          }
        case 91: break;
        case 42: 
          { return FN_DICT_TOKEN;
          }
        case 92: break;
        case 28: 
          { return OP_MINUS;
          }
        case 93: break;
        case 47: 
          { return ELSE_TOKEN;
          }
        case 94: break;
        case 20: 
          { return COMMA_TOKEN;
          }
        case 95: break;
        case 38: 
          { return DEFAULTNS_TOKEN;
          }
        case 96: break;
        case 29: 
          { return OP_LE;
          }
        case 97: break;
        case 34: 
          { return FN_NEW_TOKEN;
          }
        case 98: break;
        case 68: 
          { return NAMESPACE_TOKEN;
          }
        case 99: break;
        case 65: 
          { return PROPERTIES_TOKEN;
          }
        case 100: break;
        case 54: 
          { return RETURN_TOKEN;
          }
        case 101: break;
        case 8: 
          { return ASSIGN_TOKEN;
          }
        case 102: break;
        case 49: 
          { return BOOL_TOKEN_F;
          }
        case 103: break;
        case 46: 
          { return NAME_TOKEN;
          }
        case 104: break;
        case 15: 
          { return LSQBR_TOKEN;
          }
        case 105: break;
        case 57: 
          { return EXTENDS_TOKEN;
          }
        case 106: break;
        case 62: 
          { return CONTRACT_TOKEN;
          }
        case 107: break;
        case 56: 
          { return METHODS_TOKEN;
          }
        case 108: break;
        case 43: 
          { return USAGE_OUT_TOKEN;
          }
        case 109: break;
        case 31: 
          { return INDENT;
          }
        case 110: break;
        case 53: 
          { return USAGE_INOUT_TOKEN;
          }
        case 111: break;
        case 1: 
          { return ID;
          }
        case 112: break;
        case 44: 
          { return MPL_BOOL_FALSE;
          }
        case 113: break;
        case 16: 
          { return RSQBR_TOKEN;
          }
        case 114: break;
        case 64: 
          { return HRESOURCES_TOKEN;
          }
        case 115: break;
        case 11: 
          { return LPAREN_TOKEN;
          }
        case 116: break;
        case 40: 
          { return NULL_TOKEN;
          }
        case 117: break;
        case 10: 
          { return OP_GR;
          }
        case 118: break;
        case 5: 
          { return DOLLAR_TOKEN;
          }
        case 119: break;
        case 24: 
          { return STRING;
          }
        case 120: break;
        case 3: 
          { return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 121: break;
        case 14: 
          { return RBRAKETS_TOKEN;
          }
        case 122: break;
        case 19: 
          { return OP_DIV;
          }
        case 123: break;
        case 60: 
          { return USAGE_RUNTIME_TOKEN;
          }
        case 124: break;
        case 25: 
          { return OP_OR;
          }
        case 125: break;
        case 21: 
          { return OP_LS;
          }
        case 126: break;
        case 45: 
          { return THEN_TOKEN;
          }
        case 127: break;
        case 35: 
          { return OP_AND;
          }
        case 128: break;
        case 33: 
          { return OP_NOT;
          }
        case 129: break;
        case 48: 
          { return BODY_TOKEN;
          }
        case 130: break;
        case 67: 
          { return HPROPERTIES_TOKEN;
          }
        case 131: break;
        case 41: 
          { return BOOL_TOKEN_T;
          }
        case 132: break;
        case 39: 
          { return MPL_BOOL_TRUE;
          }
        case 133: break;
        case 2: 
          { return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 134: break;
        case 12: 
          { return RPAREN_TOKEN;
          }
        case 135: break;
        case 26: 
          { return MAP_TOKEN;
          }
        case 136: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
